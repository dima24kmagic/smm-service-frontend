{"version":3,"sources":["app/components/CleanPage/PanelControl/HeaderControl.js","app/components/CleanPage/PanelControl/PanelControl.js","app/components/CleanPage/PublicGroup/PublicInfo.js","app/components/CleanPage/PublicGroup/ProgressBar.js","app/components/CleanPage/PublicGroup/PublicAvatar.js","services/services.api.js","app/components/CleanPage/InputModal.js","store/reducers/reducer.clean.js","store/reducers/reducer.survey.js","store/reducers/reducer.root.js","store/index.js","app/components/CleanPage/PublicGroup/Public.js","app/components/CleanPage/PublicGroup/AddPublicButton.js","app/components/CleanPage/VideoGuide.js","app/components/CleanPage/PublicGroup/GroupsModal/Group.js","app/components/CleanPage/PublicGroup/GroupsModal/GroupsModal.js","app/components/CleanPage/CleanPage.js","app/components/TopBar.js","app/components/AddMoneyPage/AddMoneyPage.js","app/components/FeedbackPage/FeedbackPage.js","app/components/SurveyPage/SurveyAddForm/SurveyAddForm.js","app/components/SurveyPage/SurveyPage.js","app/App.js","serviceWorker.js","index.js"],"names":["HeaderControl","_this$props","this","props","text","children","onClick","style","react_default","a","createElement","className","Component","PanelControl","_this","PanelControl_HeaderControl","visibility","fa","onCleanClick","PublicInfo","_Component","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","Fragment","peopleCount","onStartClean","xmlns","width","height","viewBox","fill","stroke","stroke-width","stroke-linecap","stroke-linejoin","d","cx","cy","r","x1","y1","x2","y2","deletedPeople","ProgressBar","status","concat","progress","React","PublicAvatar","src","url","alt","VK","window","undefined","init","API_URL","API","getUserGroups","getGroupsPromise","getGroupsForClean","axios","get","params","user_vk_id","user_id","auth_key","getGroupDogsCount","groupID","id","deleteGroupFromCleanQue","backEndID","console","log","delete","addGroupToCleanAndGetItData","publicID","post","vk_id","startCleanTask","public_ids","getCleaningTasks","getFreshPublic","public_id","setAccessToken","token","patch","access_token","getPollById","_ref","ownerID","pollID","getAnswersByAnswerID","_ref2","_ref4","rightAnswerID","Promise","resolve","reject","api","v","poll_id","answer_ids","data","error","getAnswersByAnswerIdPromise","getAccessToUserWall","callMethod","onSettingChange","onSettingChangePromise","_ref3","addCallback","settings","filter","extended","fields","groups","normalizeVKGroupsData","response","items","array","map","converter","item","avatar_url","photo_100","name","InputModal","call","state","setState","swal","setActionValue","_this2","target","rel","href","type","placeholder","onChange","e","changeText","GET_USER_GROUPS","Load","Loaded","Errors","ADD_GROUP_IN_CLEAN_QUE","GET_GROUPS_FOR_CLEAN","initialState","loadingUserGroups","loadingCleanTasks","errors","cleanAllGroups","cb","allGroups","dispatch","groupsIDs","g","then","res","isAnyError","getAccessTokenFromUser","showNotEnoughMoneyModal","myInterval","setInterval","cleanTasks","payload","length","showCommentAlert","clearInterval","AddGroupInCleanQue","groupData","dogsCount","dogs_count","cleanGroupByID","DeleteGroupFromCleanQue","GetGroupsForCleanAndUserGroups","startLoading","groupsForClean","loadingProperty","title","icon","button","wrapper","document","ReactDOM","render","InputModal_InputModal","el","firstChild","content","buttons","confirm","link","slice","indexOf","money","surveys","s1","s_url","s_right_answer","winners","onUrlChange","s_key","onAnswerChange","addSurveyForm","GetWinners","keys","forEach","surveyData","split","getPollOwnerID","parseInt","_ref5","catch","err","_ref6","GetPollById","poll","answers","getRightAnswerID","users","getUsersThatResponseRight","rightUsers","combineReducers","clean","action","objectSpread","group","inCleanQue","isLoadingInfo","cleanData","isCleaning","settedGroups","settedGroup","cleanTask","userGroups","groupsSetted","userGroup","dogs","followers","toggledGroups","_action$payload","groupWithData","_action$payload2","groupWithDogs","withCleanTask","allGroupsWithClean","defineProperty","surveysLength","surveyID","history","createBrowserHistory","middleware","thunk","devToolsExtension","enhancers","push","composedEnhancers","compose","applyMiddleware","store","createStore","rootReducer","Public","PublicAvatar_PublicAvatar","ProgressBar_ProgressBar","PublicInfo_PublicInfo","connect","bindActionCreators","AddPublicButton","VideoGuide","frameBorder","allowFullScreen","Group","GroupsModal","querySelector","scrollHeight","close","GroupsModal_Group","CLEAN_TASK_ERRORS","CleanPage","publics","redirect","isAddGroupOpen","renderGroups","CleanPage_PublicGroup_Public","assign","toggleModal","setCleaningStateOnGroupByID","startCleanTasks","accessToken","timerId","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","updateCleanTasks","updateBalance","stop","getPublicIds","setCleaningStateOnPublics","setGroups","_callee3","_context3","_this3","includes","getAccessTokenFromLink","getCleanTasks","publik","refreshPublicById","addCleanTaskToGroups","publicId","freshPublic","onClean","_callee10","_context10","_this4","startCleanPublicById","freshPublicIndex","findIndex","find","CleanPage_PanelControl_PanelControl","AddPublicButton_AddPublicButton","PublicGroup_GroupsModal_GroupsModal","Redirect","to","TopBar","NavLink","balance","AddMoneyPage","method","htmlFor","autoComplete","FeedbackPage","Widgets","Comments","limit","attach","SurveyAddForm","i","SurveyPage","showAddForm","toggleAddForm","SurveyPage_SurveyAddForm_SurveyAddForm","getQueryParam","param","query","location","search","substring","urlParams","vars","pair","Error","Sentry","dsn","process","REACT_APP_SENTRY_DSN","App","newBalance","errorInfo","scope","setExtra","getUserBalance","setBalance","Router","basename","react","components_TopBar","Switch","Route","exact","path","components_CleanPage_CleanPage","bind","component","components_AddMoneyPage_AddMoneyPage","Boolean","hostname","match","es","app_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b0885ca5.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\nclass HeaderControl extends Component {\n    render() {\n        const {text, children, onClick, style} = this.props\n        return (\n            <div\n                className=\"header-control\"\n                onClick={() => onClick()}\n                style={style}\n            >\n                <div className=\"header-control__icon\">{children}</div>\n                <span>{text}</span>\n            </div>\n        )\n    }\n}\n\nexport default HeaderControl\n","import React, {Component} from 'react'\nimport HeaderControl from './HeaderControl'\nimport {FaSync, FaTrashAlt, FaBroom} from 'react-icons/fa'\nclass PanelControl extends Component {\n    render() {\n        return (\n            <div className=\"panel-control\">\n                <HeaderControl text=\"Обновить\" style={{visibility: 'hidden'}}>\n                    <FaSync />\n                </HeaderControl>\n                <HeaderControl\n                    text=\"Очистить все\"\n                    onClick={() => this.props.onCleanClick()}\n                >\n                    <FaBroom />\n                </HeaderControl>\n                <HeaderControl text=\"Удалить\" style={{visibility: 'hidden'}}>\n                    <FaTrashAlt />\n                </HeaderControl>\n            </div>\n        )\n    }\n}\n\nexport default PanelControl\n","import React, {Component} from 'react'\nimport {FaBroom, FaUsers} from 'react-icons/fa'\nimport * as PropTypes from 'prop-types'\nimport HeaderControl from '../PanelControl/HeaderControl'\n\nexport class PublicInfo extends Component {\n    render() {\n        return <>\n            <div className=\"public__info__container public__info--all\">\n                <FaUsers/>\n                {this.props.peopleCount}\n            </div>\n            <div className=\"public__info__container\">\n                <HeaderControl\n                    text=\"Очистить\"\n                    onClick={() => this.props.onStartClean()}\n                >\n                    <FaBroom />\n                </HeaderControl>\n            </div>\n            <div className=\"public__info__container public__info--deleted\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n                     stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\n                     className=\"feather feather-user-x\">\n                    <path d=\"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2\"></path>\n                    <circle cx=\"8.5\" cy=\"7\" r=\"4\"></circle>\n                    <line x1=\"18\" y1=\"8\" x2=\"23\" y2=\"13\"></line>\n                    <line x1=\"23\" y1=\"8\" x2=\"18\" y2=\"13\"></line>\n                </svg>\n                {this.props.deletedPeople}\n            </div>\n        </>\n    }\n}\n\nPublicInfo.propTypes = {\n    peopleCount: PropTypes.any,\n    deletedPeople: PropTypes.any\n}","import React from 'react'\nimport './ProgressBar.css'\n\nclass ProgressBar extends React.Component {\n    render() {\n        return (\n            <div className=\"progress-position\">\n                <span className={'progress-status'}>{this.props.status}</span>\n                <div className=\"progress\">\n                    <div\n                        className=\"progress-bar main-progress-bar\"\n                        style={{width: `${this.props.progress}%`}}\n                    >\n                        <span className=\"percent\">{this.props.progress}%</span>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport {ProgressBar}\n","import React, {Component} from 'react'\n\nexport class PublicAvatar extends Component {\n    render() {\n        return <img\n            className=\"public__heading__img\"\n            src={this.props.url}\n            alt=\"pub img\"\n        />\n    }\n}","import axios from 'axios'\n\nlet VK = window.VK\nif (VK === undefined) {\n    VK = {\n        init: () => {}\n    }\n}\n\nconst API_URL = 'https://hot-dog.site/api'\nexport const API = {\n    getUserGroups: () => getGroupsPromise,\n    getGroupsForClean: () =>\n        axios.get(API_URL + '/getPublics', {\n            params: {\n                user_vk_id: window.user_id,\n                auth_key: window.auth_key\n            }\n        }),\n    getGroupDogsCount: (groupID) =>\n        axios.get(API_URL + '/getDogsCount', {\n            params: {\n                id: groupID,\n                user_vk_id: window.user_id,\n                auth_key: window.auth_key\n            }\n        }),\n    deleteGroupFromCleanQue: (backEndID) => {\n        console.log('DELETE REQUEST, id is:', backEndID)\n        return axios.delete(API_URL + '/deletePublic', {\n            id: backEndID,\n            user_vk_id: window.user_id,\n            auth_key: window.auth_key\n        })\n    },\n    addGroupToCleanAndGetItData: (publicID) =>\n        axios.post(API_URL + '/addPublic', {\n            user_vk_id: window.user_id,\n            auth_key: window.auth_key,\n            vk_id: publicID\n        }),\n    startCleanTask: (public_ids) =>\n        axios.post('https://hot-dog.site/api/startCleanTasks', {\n            user_vk_id: window.user_id,\n            auth_key: window.auth_key,\n            public_ids: public_ids\n        }),\n    getCleaningTasks: () =>\n        axios.get('https://hot-dog.site/api/getCleanTasks', {\n            params: {\n                user_vk_id: window.user_id,\n                auth_key: window.auth_key\n            }\n        }),\n    getFreshPublic: (public_id) =>\n        axios.get('https://hot-dog.site/api/refreshPublic', {\n            params: {\n                user_vk_id: window.user_id,\n                auth_key: window.auth_key,\n                id: public_id\n            }\n        }),\n    setAccessToken: (token) =>\n        axios.patch('https://hot-dog.site/api/setAccessToken', {\n            access_token: token,\n            user_vk_id: window.user_id,\n            auth_key: window.auth_key\n        }),\n    getPollById: ({ownerID, pollID}) => getPollById({ownerID, pollID}),\n    getAnswersByAnswerID: ({pollID, rightAnswerID}) =>\n        getAnswersByAnswerIdPromise({pollID, rightAnswerID}),\n    getAccessToUserWall: () => VK.callMethod('showSettingsBox', 8192),\n    onSettingChange: () => onSettingChangePromise()\n}\n\nconst getPollById = ({ownerID, pollID}) => {\n    return new Promise((resolve, reject) => {\n        VK.api('polls.getById', {v: '5.92', poll_id: pollID}, (data) => {\n            if (data.error) {\n                reject(data.error)\n            } else {\n                resolve(data)\n            }\n        })\n    })\n}\n\nfunction getAnswersByAnswerIdPromise({pollID, rightAnswerID}) {\n    return new Promise((resolve, reject) => {\n        VK.api(\n            'polls.getVoters',\n            {\n                v: '5.92',\n                poll_id: pollID,\n                answer_ids: rightAnswerID\n            },\n            (data) => {\n                if (data.error) {\n                    console.log('ERROR', data.error)\n                    reject(data.error)\n                } else {\n                    resolve(data)\n                }\n            }\n        )\n    })\n}\n\nconst onSettingChangePromise = () => {\n    return new Promise((resolve, reject) => {\n        VK.addCallback('onSettingsChanged', (settings) => {\n            resolve(settings)\n        })\n    })\n}\nconst getGroupsPromise = new Promise((resolve, reject) => {\n    VK.init(\n        () => {\n            VK.api(\n                'groups.get',\n                {\n                    filter: 'moder',\n                    extended: '1',\n                    fields: 'photo_100',\n                    v: '5.85'\n                },\n                (data) => {\n                    const groups = normalizeVKGroupsData(data.response.items)\n                    // const groupsCount = data.response.count\n                    // console.log(`Got ${groupsCount} publics from VK:`)\n                    // console.log(groups)\n                    resolve(groups)\n                }\n            )\n        },\n        () => {\n            console.log('VK API initialization failed')\n            reject('Groups fetch failed')\n        },\n        '5.85'\n    )\n})\n\nconst normalizeVKGroupsData = (array) => {\n    return array.map(converter)\n}\n\nconst converter = (item) => {\n    // noinspection JSUnresolvedVariable\n    return {\n        avatar_url: item.photo_100,\n        id: item.id,\n        name: item.name\n    }\n}\n","import React from 'react'\nimport swal from 'sweetalert'\nimport './InputModal.css'\n\nconst OAUTH_LINK =\n    'https://oauth.vk.com/authorize?client_id=6726221&redirect_uri=https://oauth.vk.com/blank.html&display=page&response_type=token&v=5.85&scope=groups,wall,offline'\nconst PLACEHOLDER_ACCESS_TOKEN =\n    'https://oauth.vk.com/blank.html#access_token=1383bc6d5df7bf74655b531297c71617b2345687ca&expires_in=0&user_id=159204098'\n\nclass InputModal extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {text: ''}\n    }\n\n    changeText(text) {\n        this.setState({text: text})\n        swal.setActionValue(text)\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"modal__text\">\n                    <p>Нет доступа к управлению вашими сообществами</p>\n                    <p>\n                        Для решения этой проблемы перейдите, по{' '}\n                        <a\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            href={OAUTH_LINK}\n                        >\n                            этой ссылке\n                        </a>\n                        .\n                    </p>\n                    <p>Разрешите доступ нашему приложению</p>\n                    <p>\n                        ВКонтакте покажет страницу, сообщающую, что не стоит\n                        передавать данные из адресной строки\n                    </p>\n                    <p>\n                        Однако, это абсолютно безопасно в случае с нашим\n                        приложением\n                    </p>\n                    <p>Скопируйте целиком URL и вставьте в поле ниже:</p>\n                    <input\n                        type=\"text\"\n                        placeholder={PLACEHOLDER_ACCESS_TOKEN}\n                        value={this.state.text}\n                        onChange={(e) => {\n                            this.changeText(e.target.value)\n                        }}\n                    />\n                    <p>\n                        Это необходимо для получения доступа к удалению\n                        заблокированных пользователей\n                    </p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport {InputModal}\n","import {API} from '../../services/services.api'\nimport swal from 'sweetalert'\nimport ReactDOM from 'react-dom'\nimport {InputModal} from '../../app/components/CleanPage/InputModal'\nimport React from 'react'\n\nexport const GET_USER_GROUPS = {\n    Load: 'groups/USER_GROUPS_LOAD',\n    Loaded: 'groups/USER_GROUPS_LOADED',\n    Errors: 'groups/USER_GROUPS_ERRORS'\n}\nexport const ADD_GROUP_IN_CLEAN_QUE = {\n    click: 'ADD_GROUP_IN_CLEAN_QUE_CLICK',\n    added: 'ADD_GROUP_IN_CLEAN_QUE_ADD_TO_SERVER'\n}\nexport const GET_DOGS_COUNT = 'GET_DOGS_COUNT '\nexport const DELETE_GROUP_FROM_CLEAN_QUE = 'DELETE_GROUP_FROM_CLEAN_QUE'\nexport const GET_GROUPS_FOR_CLEAN = {\n    Load: 'groups/GET_GROUPS_FOR_CLEAN_LOAD',\n    Loaded: 'groups/GET_GROUPS_FOR_CLEAN_LOADED',\n    Errors: 'groups/GET_GROUPS_FOR_CLEAN_ERRORS'\n}\nexport const CLEAN_GROUP_BY_ID = 'CLEAN_GROUP_BY_ID'\nexport const UPDATE_CLEANING_STATE = 'UPDATE_CLEANING_STATE'\nexport const CLEAN_ALL_GROUPS = 'CLEAN_ALL_GROUPS'\n\nconst initialState = {\n    groups: {\n        data: [],\n        loadingUserGroups: true,\n        loadingCleanTasks: true,\n        errors: []\n    }\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case GET_GROUPS_FOR_CLEAN.Load: {\n            return {\n                ...state,\n                groups: {\n                    ...state.groups,\n                    loadingCleanTasks: true\n                }\n            }\n        }\n        case GET_GROUPS_FOR_CLEAN.Loaded: {\n            const groupsForClean = action.payload\n            groupsForClean.forEach((group) => {\n                group.inCleanQue = true\n                group.isLoadingInfo = false\n                group.cleanData = {\n                    isCleaning: false\n                }\n            })\n            return {\n                ...state,\n                groups: {\n                    ...state.groups,\n                    data: groupsForClean,\n                    loadingCleanTasks: false\n                }\n            }\n        }\n        case UPDATE_CLEANING_STATE: {\n            const cleanTasks = action.payload\n            if (cleanTasks.length === 0) {\n                return state\n            } else {\n                let settedGroups = state.groups.data.map((g) => g)\n                settedGroups.forEach((settedGroup) => {\n                    cleanTasks.forEach((cleanTask) => {\n                        if (settedGroup.backEndID === cleanTask.public_id) {\n                            if (cleanTask.status === 'Завершили') {\n                                settedGroup.cleanData = {\n                                    isCleaning: false\n                                }\n                            } else {\n                                settedGroup.cleanData = {\n                                    isCleaning: true,\n                                    progress: cleanTask.progress,\n                                    status: cleanTask.status\n                                }\n                            }\n                        }\n                    })\n                })\n                return {\n                    ...state,\n                    groups: {\n                        ...state.groups,\n                        data: settedGroups\n                    }\n                }\n            }\n        }\n        case GET_USER_GROUPS.Load: {\n            return {\n                ...state,\n                groups: {\n                    ...state.groups,\n                    loadingUserGroups: true\n                }\n            }\n        }\n        case GET_USER_GROUPS.Loaded: {\n            const userGroups = action.payload\n            const groupsSetted = state.groups.data\n            userGroups.forEach((group) => {\n                group.inCleanQue = false\n                group.isLoadingInfo = true\n            })\n            userGroups.forEach((userGroup) => {\n                groupsSetted.forEach((settedGroup) => {\n                    if (userGroup.id === settedGroup.vk_id) {\n                        userGroup.inCleanQue = settedGroup.inCleanQue\n                        userGroup.backEndID = settedGroup.id\n                        userGroup.dogs = settedGroup.dogs\n                        userGroup.followers = settedGroup.followers\n                        userGroup.cleanData = settedGroup.cleanData\n                    }\n                })\n            })\n            return {\n                ...state,\n                groups: {\n                    data: userGroups,\n                    loadingUserGroups: false\n                }\n            }\n        }\n        case ADD_GROUP_IN_CLEAN_QUE.click:\n            const groupID = action.payload\n            let toggledGroups = state.groups.data.map((group) => {\n                if (group.id === groupID) {\n                    return {\n                        ...group,\n                        inCleanQue: true,\n                        cleanData: {\n                            isCleaning: false\n                        }\n                    }\n                } else {\n                    return group\n                }\n            })\n            return {\n                ...state,\n                groups: {\n                    ...state.groups,\n                    data: toggledGroups\n                }\n            }\n        case ADD_GROUP_IN_CLEAN_QUE.added: {\n            const {groupData, groupID} = action.payload\n            let groupWithData = state.groups.data.map((group) => {\n                if (group.id === groupID) {\n                    return {\n                        ...group,\n                        ...groupData,\n                        dogs: 'Анализ...',\n                        backEndID: groupData.id\n                    }\n                } else {\n                    return group\n                }\n            })\n            return {\n                ...state,\n                groups: {\n                    ...state.groups,\n                    data: groupWithData\n                }\n            }\n        }\n        case GET_DOGS_COUNT: {\n            const {dogsCount, groupID} = action.payload\n            let groupWithDogs = state.groups.data.map((group) => {\n                if (group.vk_id === groupID) {\n                    return {\n                        ...group,\n                        dogs: dogsCount\n                    }\n                } else {\n                    return group\n                }\n            })\n            return {\n                ...state,\n                groups: {\n                    ...state.groups,\n                    data: groupWithDogs\n                }\n            }\n        }\n        case DELETE_GROUP_FROM_CLEAN_QUE: {\n            const groupID = action.payload\n            let toggledGroups = state.groups.data.map((group) => {\n                if (group.id === groupID) {\n                    return {...group, inCleanQue: false}\n                } else {\n                    return group\n                }\n            })\n            return {...state, groups: {...state.groups, data: toggledGroups}}\n        }\n        case CLEAN_GROUP_BY_ID: {\n            let groupID = action.payload\n            let withCleanTask = state.groups.data.map((group) => {\n                if (group.backEndID === groupID) {\n                    return {\n                        ...group,\n                        cleanData: {\n                            isCleaning: true,\n                            progress: 0,\n                            status: 'Отправляем запрос'\n                        }\n                    }\n                } else {\n                    return group\n                }\n            })\n            return {\n                ...state,\n                groups: {\n                    ...state.groups,\n                    data: withCleanTask\n                }\n            }\n        }\n        case CLEAN_ALL_GROUPS: {\n            const allGroupsWithClean = state.groups.data.map((group) => {\n                API.startCleanTask([group.backEndID])\n                return {\n                    ...group,\n                    cleanData: {\n                        isCleaning: true,\n                        progress: 0,\n                        status: 'Отправляем запрос'\n                    }\n                }\n            })\n            return {\n                ...state,\n                groups: {\n                    ...state.groups,\n                    data: allGroupsWithClean\n                }\n            }\n        }\n        default:\n            return state\n    }\n}\n\nexport const cleanAllGroups = (cb, allGroups) => {\n    return (dispatch) => {\n        const groupsIDs = allGroups.map((g) => {\n            return g.backEndID\n        })\n        API.startCleanTask(groupsIDs).then((res) => {\n            let isAnyError\n            if (res.data.error) {\n                isAnyError = res.data.error.id\n            }\n            switch (isAnyError) {\n                case 1:\n                    getAccessTokenFromUser()\n                    break\n                case 2:\n                    showNotEnoughMoneyModal(res.error.value)\n                    break\n                default:\n                    dispatch({\n                        type: CLEAN_ALL_GROUPS\n                    })\n                    let myInterval = setInterval(() => {\n                        API.getCleaningTasks().then((r) => {\n                            const cleanTasks = r.data\n                            dispatch({\n                                type: UPDATE_CLEANING_STATE,\n                                payload: cleanTasks\n                            })\n                            if (cleanTasks.length === 0) {\n                                showCommentAlert(cb)\n                                clearInterval(myInterval)\n                            }\n                        })\n                    }, 500)\n            }\n        })\n    }\n}\n\nexport const AddGroupInCleanQue = (groupID) => {\n    return (dispatch) => {\n        dispatch({\n            type: ADD_GROUP_IN_CLEAN_QUE.click,\n            payload: groupID\n        })\n        API.addGroupToCleanAndGetItData(groupID).then((r) => {\n            const groupData = r.data\n            dispatch({\n                type: ADD_GROUP_IN_CLEAN_QUE.added,\n                payload: {groupData, groupID}\n            })\n            API.getGroupDogsCount(groupData.id).then((r) => {\n                const dogsCount = r.data.dogs_count\n                dispatch({\n                    type: GET_DOGS_COUNT,\n                    payload: {dogsCount, groupID}\n                })\n            })\n        })\n    }\n}\n\nexport const cleanGroupByID = (groupID, cb) => {\n    return (dispatch) => {\n        API.startCleanTask([groupID]).then((res) => {\n            if (res.data.error) {\n                switch (res.data.error.id) {\n                    case 1:\n                        getAccessTokenFromUser()\n                        break\n                    case 2:\n                        showNotEnoughMoneyModal(res.error.value)\n                        break\n                    default:\n                }\n            } else {\n                dispatch({\n                    type: CLEAN_GROUP_BY_ID,\n                    payload: groupID\n                })\n                let myInterval = setInterval(() => {\n                    API.getCleaningTasks().then((r) => {\n                        const cleanTasks = r.data\n                        dispatch({\n                            type: UPDATE_CLEANING_STATE,\n                            payload: cleanTasks\n                        })\n                        if (cleanTasks.length === 0) {\n                            showCommentAlert(cb)\n                            clearInterval(myInterval)\n                        }\n                    })\n                }, 500)\n            }\n        })\n    }\n}\n\nexport const DeleteGroupFromCleanQue = (groupID, backEndID) => {\n    return (dispatch) => {\n        dispatch({\n            type: DELETE_GROUP_FROM_CLEAN_QUE,\n            payload: groupID\n        })\n        API.deleteGroupFromCleanQue(backEndID).then((r) => {})\n    }\n}\n\nexport const GetGroupsForCleanAndUserGroups = () => {\n    return (dispatch) => {\n        startLoading(GET_GROUPS_FOR_CLEAN, dispatch)\n        API.getGroupsForClean().then((r) => {\n            const groupsForClean = r.data\n            dispatch({\n                type: GET_GROUPS_FOR_CLEAN.Loaded,\n                payload: groupsForClean\n            })\n            let myInterval = setInterval(() => {\n                API.getCleaningTasks().then((r) => {\n                    const cleanTasks = r.data\n                    dispatch({\n                        type: UPDATE_CLEANING_STATE,\n                        payload: cleanTasks\n                    })\n                    if (cleanTasks.length === 0) {\n                        clearInterval(myInterval)\n                    }\n                })\n            }, 500)\n            startLoading(GET_USER_GROUPS, dispatch)\n            const groups = API.getUserGroups()\n            groups.then((res) => {\n                dispatch({type: GET_USER_GROUPS.Loaded, payload: res})\n            })\n        })\n    }\n}\n\nconst startLoading = (loadingProperty, dispatch) => {\n    dispatch({\n        type: loadingProperty.Load\n    })\n}\n\nfunction showCommentAlert(cb) {\n    console.log('Comment alert')\n    const response = swal({\n        title: 'Спасибо!',\n        icon: 'success',\n        text: 'Оставьте, пожалуйста, отзыв о сервисе :)',\n        button: 'Хорошо'\n    })\n    response.then((r) => {\n        console.log('R IS:', r)\n        if (r === true) {\n            if (cb) {\n                cb()\n            }\n        }\n    })\n}\n\nfunction getAccessTokenFromUser() {\n    let wrapper = window.document.createElement('div')\n    ReactDOM.render(<InputModal />, wrapper)\n    let el = wrapper.firstChild\n    const response = swal({\n        title: 'Упс. Мы не можем очистить ваши сообщества',\n        content: el,\n        buttons: {\n            confirm: {\n                text: 'Сохранить и запустить!',\n                value: ''\n            }\n        }\n    })\n    response.then((r) => {\n        const token = getAccessTokenFromLink(r)\n        API.setAccessToken(token)\n    })\n}\nfunction showNotEnoughMoneyModal(money, cb) {\n    const response = swal({\n        title: 'Упс.. Недостаточно денег',\n        icon: 'error',\n        text: `Для очистки сообществ нужно еще ${money}р.\\nПополните, пожалуйста, баланс`,\n        button: {text: 'Пополнить'}\n    })\n    response.then((r) => {\n        if (r === true) {\n            console.log('GO TO ADD MONEY')\n        }\n    })\n}\n\nfunction getAccessTokenFromLink(link) {\n    const searchStartStr = '#access_token='\n    const searchEndStr = '&expires_in='\n    return link.slice(\n        link.indexOf(searchStartStr) + searchStartStr.length,\n        link.indexOf(searchEndStr)\n    )\n}\n","import {API} from '../../services/services.api'\n\nconst ON_URL_CHANGE = 'ON_URL_CHANGE'\nconst ON_ANSWER_CHANGE = 'ON_ANSWER_CHANGE'\nconst ADD_SURVEY_FORM = 'ADD_SURVEY_FORM'\n\nconst initialState = {\n    surveys: {\n        s1: {\n            s_url: '',\n            s_right_answer: ''\n        }\n    },\n    winners: []\n}\n\nconst GET_POLL_BY_ID = 'GET_POLL_BY_ID'\n\nexport default (state = initialState, action) => {\n    const {type, payload} = action\n    switch (type) {\n        case ON_ANSWER_CHANGE: {\n            const {s_key, value} = payload\n            return {\n                ...state,\n                surveys: {\n                    ...state.surveys,\n                    [s_key]: {\n                        ...state.surveys[s_key],\n                        s_right_answer: value\n                    }\n                }\n            }\n        }\n        case ON_URL_CHANGE: {\n            const {s_key, value} = payload\n            return {\n                ...state,\n                surveys: {\n                    ...state.surveys,\n                    [s_key]: {\n                        ...state.surveys[s_key],\n                        s_url: value\n                    }\n                }\n            }\n        }\n        case ADD_SURVEY_FORM: {\n            let surveysLength = Object.keys(state.surveys).length\n            const surveyID = 's' + surveysLength + 1\n            console.log('SURVEY_ID:', surveyID, surveysLength, state.surveys)\n            return {\n                ...state,\n                surveys: {\n                    ...state.surveys,\n                    [surveyID]: {s_url: '', s_right_answer: ''}\n                }\n            }\n        }\n        case GET_POLL_BY_ID: {\n            const pollData = payload\n        }\n        default:\n            return state\n    }\n}\n\nfunction getRightAnswerID({poll, s_right_answer}) {\n    const rightAnswer = poll.answers[s_right_answer - 1]\n    return rightAnswer.id\n}\n\nfunction getUsersThatResponseRight({pollID, rightAnswerID}) {\n    return API.getAnswersByAnswerID({pollID, rightAnswerID}).then(\n        ({response}) => {\n            const rightUsers = response[0].users.items\n            return rightUsers\n        }\n    )\n}\n\nexport const GetPollById = ({ownerID, pollID, s_key, s_right_answer}) => {\n    ownerID = parseInt(ownerID)\n    pollID = parseInt(pollID)\n    return API.getPollById({ownerID, pollID})\n        .then(({response}) => {\n            return response\n            // const rightAnswerID = getRightAnswerID({response, s_right_answer})\n            // getUsersThatResponseRight({pollID, rightAnswerID}).then((rightUsers) => {\n            //     console.log('SHIT', rightUsers)\n            // })\n        })\n        .catch((err) => {\n            API.getAccessToUserWall()\n            return API.onSettingChange().then((r) => {\n                return API.getPollById({ownerID, pollID}).then(({response}) => {\n                    // console.log(`${s_key} DATA`, response)\n                    return response\n                })\n            })\n        })\n}\n\nexport const onUrlChange = (e, s_key) => {\n    return (dispatch) => {\n        const value = e.target.value\n        dispatch({\n            type: ON_URL_CHANGE,\n            payload: {value, s_key}\n        })\n    }\n}\n\nexport const onAnswerChange = (e, s_key) => {\n    return (dispatch) => {\n        const value = e.target.value\n        dispatch({\n            type: ON_ANSWER_CHANGE,\n            payload: {value, s_key}\n        })\n    }\n}\n\nexport const addSurveyForm = () => {\n    return (dispatch) => {\n        dispatch({\n            type: ADD_SURVEY_FORM\n        })\n    }\n}\n\nfunction getPollID(s_url) {\n    const ownerAndPollID = s_url.split('poll-')[1]\n    return ownerAndPollID.split('_')[1]\n}\n\nfunction getPollOwnerID(s_url) {\n    const ownerAndPollID = s_url.split('poll-')[1]\n    return ownerAndPollID.split('_')[0]\n}\n\nexport const GetWinners = (surveys) => {\n    return (dispatch) => {\n        Object.keys(surveys).forEach((s_key) => {\n            const surveyData = surveys[s_key]\n            const pollID = getPollID(surveyData.s_url)\n            const ownerID = getPollOwnerID(surveyData.s_url)\n            const s_right_answer = surveys[s_key].s_right_answer\n            GetPollById({ownerID, pollID, s_key, s_right_answer}).then(\n                (poll) => {\n                    console.log('FETCH THE POLL:', poll)\n                    const rightAnswerID = getRightAnswerID({\n                        poll,\n                        s_right_answer\n                    })\n                    getUsersThatResponseRight({pollID, rightAnswerID}).then(\n                        (rightUsers) => {\n                            console.log('RIGHT USERS:', rightUsers)\n                        }\n                    )\n                }\n            )\n        })\n    }\n}\n","import {combineReducers} from 'redux'\nimport clean from './reducer.clean'\nimport surveys from './reducer.survey'\nexport default combineReducers({\n    clean,\n    surveys\n})\n","import {createStore, applyMiddleware, compose} from 'redux'\nimport logger from 'redux-logger'\nimport thunk from 'redux-thunk'\nimport {createBrowserHistory} from 'history'\nimport rootReducer from './reducers/reducer.root'\n\nexport const history = createBrowserHistory()\n\nconst middleware = [thunk]\nconst devToolsExtension = window.devToolsExtension\nconst enhancers = []\n\nif (typeof devToolsExtension === 'function') {\n    enhancers.push(devToolsExtension())\n}\n\nconst composedEnhancers = compose(\n    applyMiddleware(...middleware),\n    ...enhancers\n)\n\nconst initialState = {}\n\nconst store = createStore(rootReducer, initialState, composedEnhancers)\n\nexport default store\n","import React, {Component} from 'react'\nimport {PublicInfo} from './PublicInfo'\nimport {ProgressBar} from './ProgressBar'\nimport {PublicAvatar} from './PublicAvatar'\nimport './Public.css'\nimport PropTypes from 'prop-types'\nimport {bindActionCreators} from 'redux'\nimport {connect} from 'react-redux'\nimport {cleanGroupByID} from '../../../../store/reducers/reducer.clean'\nimport {history} from '../../../../store'\n\nclass Public extends Component {\n    static propTypes = {\n        id: PropTypes.number.isRequired,\n        vk_id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n        avatar_url: PropTypes.string.isRequired,\n        followers: PropTypes.number.isRequired,\n        dogs: PropTypes.oneOf(PropTypes.number, PropTypes.string).isRequired,\n        cleanData: PropTypes.shape({\n            isCleaning: PropTypes.bool.isRequired,\n            progress: PropTypes.number,\n            status: PropTypes.string\n        }).isRequired,\n        onClean: PropTypes.func.isRequired\n    }\n\n    render() {\n        const {backEndID, cleanGroupByID} = this.props;\n        return (\n            <div className=\"public-wrapper\">\n                <div className=\"public\">\n                    <div className=\"public__heading\">\n                        <PublicAvatar url={this.props.avatar_url} />\n                        <div className=\"public__heading__name\">\n                            {this.props.name}\n                        </div>\n                    </div>\n                    <div className=\"public__info\">\n                        {this.props.cleanData.isCleaning ? (\n                            <ProgressBar\n                                progress={this.props.cleanData.progress}\n                                status={this.props.cleanData.status}\n                            />\n                        ) : (\n                            <PublicInfo\n                                peopleCount={this.props.followers}\n                                deletedPeople={this.props.dogs}\n                                onStartClean={() => {\n                                    cleanGroupByID(backEndID, () => {history.push(\"/feedback\")})\n                                }}\n                            />\n                        )}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nconst mapDispatchToProps = dispatch => bindActionCreators({cleanGroupByID}, dispatch)\n\nexport default connect(null, mapDispatchToProps)(Public);\n","import React, {Component} from 'react'\nimport * as PropTypes from 'prop-types'\n\nexport class AddPublicButton extends Component {\n    render() {\n        return <div\n            className=\"btn btn__add\"\n            onClick={this.props.onClick}\n        >\n            Добавить Сообщество\n        </div>\n    }\n}\n\nAddPublicButton.propTypes = {onClick: PropTypes.func}","import React from 'react'\n\nexport function VideoGuide() {\n    return (\n        <iframe\n            title={\"video guide\"}\n            src=\"//vk.com/video_ext.php?oid=-171466987&id=456239020&hash=2a4b21d6648495d0&hd=1\"\n            width=\"426\"\n            height=\"210\"\n            frameBorder=\"0\"\n            allowFullScreen\n        />\n    )\n}","import React, {Component} from 'react'\nimport {bindActionCreators} from 'redux'\nimport {connect} from 'react-redux'\nimport {\n    AddGroupInCleanQue,\n    DeleteGroupFromCleanQue\n} from '../../../../../store/reducers/reducer.clean'\n\nclass Group extends Component {\n    render() {\n        const {group, AddGroupInCleanQue, DeleteGroupFromCleanQue} = this.props\n        return (\n            <div className=\"group\">\n                <div className=\"group__details\">\n                    <img src={group.avatar_url} alt=\"avatar\" />\n                    <span className=\"ellipsis\">{group.name}</span>\n                </div>\n                <span\n                    className={`plus-sign ${\n                        group.inCleanQue ? 'plus-sign--cris' : ''\n                    }`}\n                    onClick={() => {\n                        if (group.inCleanQue) {\n                            console.log('Group for deleting', group)\n                            DeleteGroupFromCleanQue(group.id, group.backEndID)\n                        } else {\n                            AddGroupInCleanQue(group.id)\n                        }\n                    }}\n                />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({})\n\nconst mapDispatchToProps = (dispatch) =>\n    bindActionCreators(\n        {\n            AddGroupInCleanQue,\n            DeleteGroupFromCleanQue\n        },\n        dispatch\n    )\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Group)\n","import React, {Component} from 'react'\nimport './modal.scss'\nimport Group from './Group'\n\nclass GroupsModal extends Component {\n    componentDidMount() {\n        const html = document.querySelector(\"html\");\n        const height = html.scrollHeight;\n        document.querySelector('.modal__bg').style.height = `${height}px`\n    }\n\n    render() {\n        const {groups, close} = this.props\n        return (\n            <div className=\"modal\">\n                <div className=\"modal__bg\" onClick={close} />\n                <div className=\"modal__body\">\n                    <div className=\"modal__body__text\">Выберите сообщество</div>\n                    <div className=\"modal__body__content\">\n                        {groups.map((group) => {\n                            return <Group group={group} />\n                        })}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default GroupsModal\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport PanelControl from './PanelControl/PanelControl'\nimport Public from './PublicGroup/Public'\nimport {bindActionCreators} from 'redux'\nimport {AddPublicButton} from './PublicGroup/AddPublicButton'\nimport swal from 'sweetalert'\nimport axios from 'axios'\nimport {\n    GetGroupsForCleanAndUserGroups,\n    cleanGroupByID,\n    cleanAllGroups\n} from '../../../store/reducers/reducer.clean'\nimport ReactDOM from 'react-dom'\nimport {InputModal} from './InputModal'\nimport {VideoGuide} from './VideoGuide'\nimport {Redirect} from 'react-router-dom'\nimport GroupsModal from './PublicGroup/GroupsModal/GroupsModal'\nimport {history} from '../../../store'\n\nconst CLEAN_TASK_ERRORS = ['Возникла ошибка', 'Завершили'] // errors? finished != error\n\nclass CleanPage extends Component {\n    state = {\n        publics: [],\n        redirect: false,\n        isAddGroupOpen: false\n    }\n\n    componentWillMount() {\n        const {GetGroupsForCleanAndUserGroups} = this.props\n        GetGroupsForCleanAndUserGroups()\n    }\n\n    renderGroups = (groups) => {\n        if (!groups.length) return null\n        return groups.map(\n            (group) => group.inCleanQue && <Public {...group} key={group.id} />\n        )\n    }\n\n    async startCleanPublicById(publicID) {\n        const {setCleaningStateOnGroupByID} = this.props\n        const response = await this.startCleanTasks([publicID])\n        if ('error' in response) {\n            if (response.error.id === 1) {\n                const accessToken = await this.getAccessTokenFromUser()\n                await this.setAccessToken(accessToken)\n                return await this.onStartClean()\n            } else if (response.error.id === 2) {\n                await this.showNotEnoughMoneyModal(response.error.value)\n            }\n        } else {\n            setCleaningStateOnGroupByID(publicID)\n            // this.setGroups(publics)\n            this.timerId = setInterval(async () => {\n                await this.updateCleanTasks()\n                console.log(this)\n                await this.props.updateBalance()\n            }, 1500)\n        }\n    }\n\n    async onStartClean() {\n        const public_ids = this.getPublicIds()\n        const response = await this.startCleanTasks(public_ids)\n        if ('error' in response) {\n            if (response.error.id === 1) {\n                const accessToken = await this.getAccessTokenFromUser()\n                await this.setAccessToken(accessToken)\n                return await this.onStartClean()\n            } else if (response.error.id === 2) {\n                await this.showNotEnoughMoneyModal(response.error.value)\n            }\n        } else {\n            const publics = this.setCleaningStateOnPublics()\n            this.setGroups(publics)\n            this.timerId = setInterval(async () => {\n                await this.updateCleanTasks()\n                await this.props.updateBalance()\n            }, 1500)\n        }\n    }\n\n    async startCleanTasks(public_ids) {\n        return (await axios.post('https://hot-dog.site/api/startCleanTasks', {\n            user_vk_id: window.user_id,\n            auth_key: window.auth_key,\n            public_ids: public_ids\n        })).data\n    }\n\n    cleanTaskIsFinished(cleanTask) {\n        return CLEAN_TASK_ERRORS.includes(cleanTask.status)\n    }\n\n    getPublicIds() {\n        return this.state.publics.map((item) => item.id)\n    }\n\n    async getAccessTokenFromUser() {\n        let wrapper = window.document.createElement('div')\n        ReactDOM.render(<InputModal />, wrapper)\n        let el = wrapper.firstChild\n        const response = await swal({\n            title: 'Упс. Мы не можем очистить ваши сообщества',\n            content: el,\n            buttons: {\n                confirm: {\n                    text: 'Сохранить и запустить!',\n                    value: ''\n                }\n            }\n        })\n        return this.getAccessTokenFromLink(response)\n    }\n\n    async setAccessToken(token) {\n        return await axios.patch('https://hot-dog.site/api/setAccessToken', {\n            access_token: token,\n            user_vk_id: window.user_id,\n            auth_key: window.auth_key\n        })\n    }\n\n    async getCleanTasks() {\n        return (await axios.get('https://hot-dog.site/api/getCleanTasks', {\n            params: {\n                user_vk_id: window.user_id,\n                auth_key: window.auth_key\n            }\n        })).data\n    }\n\n    async updateCleanTasks() {\n        const cleanTasks = await this.getCleanTasks()\n        if (!(cleanTasks && cleanTasks.length)) {\n            clearInterval(this.timerId)\n            for (const publik of this.state.publics) {\n                await this.refreshPublicById(publik.id)\n            }\n            await this.showCommentAlert()\n            return\n        }\n        const publics = this.addCleanTaskToGroups(\n            this.state.publics,\n            cleanTasks\n        )\n        this.setGroups(publics)\n    }\n\n    async refreshPublicById(publicId) {\n        const freshPublic = await this.getFreshPublic(publicId)\n        freshPublic.cleanData = {\n            isCleaning: false\n        }\n        freshPublic.onClean = async () => {\n            await this.startCleanPublicById(freshPublic.id)\n        }\n        const {publics} = this.state\n        const freshPublicIndex = publics.findIndex(\n            (item) => item.id === publicId\n        )\n        publics[freshPublicIndex] = freshPublic\n        this.setGroups(publics)\n    }\n\n    async getFreshPublic(public_id) {\n        return (await axios.get('https://hot-dog.site/api/refreshPublic', {\n            params: {\n                user_vk_id: window.user_id,\n                auth_key: window.auth_key,\n                id: public_id\n            }\n        })).data\n    }\n\n    getAccessTokenFromLink(link) {\n        const searchStartStr = '#access_token='\n        const searchEndStr = '&expires_in='\n        return link.slice(\n            link.indexOf(searchStartStr) + searchStartStr.length,\n            link.indexOf(searchEndStr)\n        )\n    }\n\n    getPublicById(publics, public_id) {\n        return publics.find((item) => item.id === public_id)\n    }\n\n    async showNotEnoughMoneyModal(money) {\n        const response = await swal({\n            title: 'Упс.. Недостаточно денег',\n            icon: 'error',\n            text: `Для очистки сообществ нужно еще ${money}р.\\nПополните, пожалуйста, баланс`,\n            button: {text: 'Пополнить'}\n        })\n        if (response) this.setState({redirect: '/add_money'})\n    }\n\n    async showCommentAlert() {\n        const response = await swal({\n            title: 'Спасибо!',\n            icon: 'success',\n            text: 'Оставьте, пожалуйста, отзыв о сервисе :)',\n            button: 'Хорошо'\n        })\n        if (response) this.setState({redirect: '/feedback'})\n    }\n\n    toggleModal = () => {\n        this.setState({\n            isAddGroupOpen: !this.state.isAddGroupOpen\n        })\n    }\n\n    render() {\n        const {isAddGroupOpen} = this.state\n        const {groups, cleanAllGroups} = this.props\n\n        return (\n            <div className=\"clean\">\n                <PanelControl\n                    onCleanClick={() =>\n                        cleanAllGroups(() => {\n                            history.push('/feedback')\n                        }, groups)\n                    }\n                />\n\n                <div className=\"publics\">\n                    {groups && this.renderGroups(groups)}\n                </div>\n\n                <AddPublicButton onClick={this.toggleModal} />\n\n                {isAddGroupOpen && (\n                    <GroupsModal close={this.toggleModal} groups={groups} />\n                )}\n\n                <VideoGuide />\n\n                {this.state.redirect && (\n                    <Redirect to={this.state.redirect} push />\n                )}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({clean}) => ({\n    groups: clean.groups.data,\n    cleanTasks: clean.cleanTasks\n})\n\nconst mapDispatchToProps = (dispatch) =>\n    bindActionCreators(\n        {\n            GetGroupsForCleanAndUserGroups,\n            setCleaningStateOnGroupByID: cleanGroupByID,\n            cleanAllGroups\n        },\n        dispatch\n    )\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CleanPage)\n","import React, {Component} from 'react'\nimport {NavLink} from 'react-router-dom'\nimport '../fonts/fontello/fontello.css'\n\nclass TopBar extends Component {\n    render() {\n        return (\n            <header className=\"nav\">\n                <div className=\"nav__info\">\n                    <nav>\n                        <NavLink className={'nav__item'} to={'/feedback'}>\n                            Отзывы\n                        </NavLink>\n                        <NavLink className={'nav__item'} to={'/add_money'}>\n                            Пополнить баланс\n                        </NavLink>\n                    </nav>\n                    <div>\n                        <span className=\"balance\">\n                            <i className=\"icon-rouble\" />\n                            {this.props.balance}р\n                        </span>\n                    </div>\n                </div>\n                <div className=\"nav__actions\">\n                    <nav>\n                        <NavLink className=\"nav__item\" to=\"/clean\">\n                            Очистка\n                        </NavLink>\n                        <NavLink className={'nav__item'} to={'/survey'}>\n                            Опросы\n                        </NavLink>\n                    </nav>\n                </div>\n            </header>\n        )\n    }\n}\n\nexport default TopBar\n","import React from 'react'\nimport './money-page.scss'\n\nclass AddMoneyPage extends React.Component {\n    componentWillMount() {\n        this.timerId = window.setInterval(() => {\n            this.props.updateBalance()\n        }, 1000)\n    }\n\n    componentWillUnmount() {\n        window.clearInterval(this.timerId)\n    }\n\n    render() {\n        return (\n            <div className=\"add-money-page\">\n                <div className=\"text\">\n                    <p>Пополните баланс для очистки сообщества:</p>\n                    <div className=\"underline\" />\n                </div>\n                <form\n                    action=\"https://money.yandex.ru/quickpay/confirm.xml\"\n                    method=\"post\"\n                    target=\"_blank\"\n                >\n                    <input\n                        type=\"hidden\"\n                        name=\"receiver\"\n                        value=\"410011043655449\"\n                    />\n                    <input type=\"hidden\" name=\"quickpay-form\" value=\"shop\" />\n                    <input type=\"hidden\" name=\"targets\" value=\"Hot Dog\" />\n\n                    <div className=\"money-input-wrapper\">\n                        <p>\n                            <label htmlFor=\"money-input\">Сумма:</label>\n                        </p>\n                        <input\n                            type=\"text\"\n                            name=\"sum\"\n                            placeholder=\"100 руб\"\n                            id=\"money-input\"\n                            className=\"money-input\"\n                            autoComplete=\"false\"\n                        />\n                        <p>Комиссия — 0%</p>\n                    </div>\n                    <div className=\"payment-type-wrapper\">\n                        <p>Способ оплаты:</p>\n                        <label>\n                            <input type=\"radio\" name=\"paymentType\" value=\"PC\" />\n                            Яндекс.Деньгами\n                        </label>\n                        <label>\n                            <input type=\"radio\" name=\"paymentType\" value=\"AC\" />\n                            Банковской картой\n                        </label>\n                    </div>\n                    <input\n                        type=\"hidden\"\n                        name=\"formcomment\"\n                        value=\"hot dog: пополнение баланса\"\n                    />\n                    <input\n                        type=\"hidden\"\n                        name=\"short-dest\"\n                        value=\"hot dog: пополнение баланса\"\n                    />\n                    <input\n                        type=\"hidden\"\n                        name=\"label\"\n                        value={`hot-dog: ${window.user_id}`}\n                    />\n                    <input\n                        type=\"hidden\"\n                        name=\"successURL\"\n                        value=\"https://vk.com/app6731681_-171466987\"\n                    />\n                    <button type=\"submit\" className=\"submit-button\">\n                        Пополнить\n                    </button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default AddMoneyPage\n","import React from 'react'\nimport './FeedbackPage.css'\n\nclass FeedbackPage extends React.Component {\n    componentWillMount() {\n        /*global VK*/\n        // noinspection JSUnresolvedVariable, JSUnresolvedFunction\n        VK.Widgets.Comments('vk_comments', {\n            limit: 10,\n            attach: '*',\n            height: 800\n        })\n    }\n    render() {\n        return (\n            <div>\n                <div id=\"vk_comments\" className=\"vk-comments\" />\n            </div>\n        )\n    }\n}\n\nexport default FeedbackPage\n","import React, {Component} from 'react'\nimport './survey-form.scss'\n\nclass SurveyAddForm extends Component {\n    render() {\n        const {\n            i,\n            s_url,\n            s_right_answer,\n            onUrlChange,\n            onAnswerChange,\n            s_key\n        } = this.props\n        return (\n            <div className=\"survey-form\">\n                <div className=\"survey__instance\">\n                    <div className=\"survey__num\">Опрос №{i + 1}</div>\n                    <div className=\"survey-input\">\n                        <div className=\"input-place\">\n                            <label htmlFor=\"survey-link\">Ссылка на опрос</label>\n                            <input\n                                type=\"text\"\n                                id=\"survey-link\"\n                                value={s_url}\n                                onChange={(e) => onUrlChange(e, s_key)}\n                            />\n                        </div>\n                        <div className=\"input-place\">\n                            <label htmlFor=\"right-num\">Ответ (№)</label>\n                            <input\n                                type=\"number\"\n                                id=\"right-num\"\n                                value={s_right_answer}\n                                onChange={(e) => onAnswerChange(e, s_key)}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SurveyAddForm\n","import React, {Component} from 'react'\nimport SurveyAddForm from './SurveyAddForm/SurveyAddForm'\nimport connect from 'react-redux/src/connect/connect'\nimport {bindActionCreators} from 'redux'\nimport {\n    onAnswerChange,\n    onUrlChange,\n    addSurveyForm,\n    GetWinners\n} from '../../../store/reducers/reducer.survey'\n\nconsole.log('ADD FORM KEYS')\n\nclass SurveyPage extends Component {\n    state = {\n        showAddForm: false\n    }\n    toggleAddForm = () => {\n        this.setState({\n            showAddForm: !this.state.showAddForm\n        })\n    }\n    render() {\n        const {\n            surveys,\n            onAnswerChange,\n            onUrlChange,\n            addSurveyForm,\n            GetWinners\n        } = this.props\n        const {showAddForm} = this.state\n        return (\n            <div className=\"survey-wrapper\">\n                <div className=\"survey-intro\">Создать Викторину!</div>\n                <span\n                    className={`plus-sign ${\n                        showAddForm ? 'plus-sign--cris' : ''\n                    }`}\n                    onClick={this.toggleAddForm}\n                />\n                {showAddForm &&\n                    Object.keys(surveys).map((s_key, i) => {\n                        const s_url = surveys[s_key].s_url\n                        const s_right_answer = surveys[s_key].s_right_answer\n\n                        return (\n                            <SurveyAddForm\n                                key={i}\n                                i={i}\n                                s_url={s_url}\n                                s_right_answer={s_right_answer}\n                                s_key={s_key}\n                                onAnswerChange={onAnswerChange}\n                                onUrlChange={onUrlChange}\n                            />\n                        )\n                    })}\n                {showAddForm && (\n                    <div className=\"btns-holder\">\n                        <div className=\"btn-ff\" onClick={addSurveyForm}>\n                            Добавить опрос\n                        </div>\n                        <div\n                            className=\"btn-ff\"\n                            onClick={() => {\n                                GetWinners(surveys)\n                            }}\n                        >\n                            Узнать победителей\n                        </div>\n                    </div>\n                )}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({surveys}) => ({\n    surveys: surveys.surveys\n})\n\nconst mapDispatchToProps = (dispatch) =>\n    bindActionCreators(\n        {onAnswerChange, onUrlChange, addSurveyForm, GetWinners},\n        dispatch\n    )\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SurveyPage)\n","import React, {Component, Fragment} from 'react'\nimport {Route, Router, Switch} from 'react-router-dom'\nimport CleanPage from './components/CleanPage/CleanPage'\nimport * as Sentry from '@sentry/browser'\nimport TopBar from './components/TopBar'\nimport AddMoneyPage from './components/AddMoneyPage/AddMoneyPage'\nimport axios from 'axios'\nimport FeedbackPage from './components/FeedbackPage/FeedbackPage'\nimport {history} from '../store'\nimport SurveyPage from './components/SurveyPage/SurveyPage'\n\nif (process.env.NODE_ENV === 'production') {\n    // noinspection JSUnresolvedVariable\n    Sentry.init({\n        dsn: process.env.REACT_APP_SENTRY_DSN\n    })\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {}\n    }\n\n    setBalance(newBalance) {\n        this.setState({balance: newBalance})\n    }\n\n    async componentWillMount() {\n        window.user_id = getQueryParam('viewer_id')\n        window.auth_key = getQueryParam('auth_key')\n        history.push('/')\n        await this.updateBalance()\n    }\n\n    async getUserBalance() {\n        return (await axios.get('https://hot-dog.site/api/getBalance', {\n            params: {\n                user_vk_id: window.user_id,\n                auth_key: window.auth_key\n            }\n        })).data.balance\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({error})\n        Sentry.withScope((scope) => {\n            Object.keys(errorInfo).forEach((key) => {\n                scope.setExtra(key, errorInfo[key])\n            })\n            Sentry.captureException(error)\n        })\n    }\n\n    async updateBalance() {\n        this.setBalance(await this.getUserBalance())\n    }\n\n    render() {\n        return (\n            <Router basename={process.env.PUBLIC_URL} history={history}>\n                <Fragment>\n                    <TopBar balance={this.state.balance} />\n                    <Switch>\n                        <Route\n                            exact\n                            path=\"/\"\n                            render={() => (\n                                <CleanPage\n                                    balance={this.state.balance}\n                                    updateBalance={this.updateBalance.bind(\n                                        this\n                                    )}\n                                />\n                            )}\n                        />\n                        <Route path=\"/clean\" component={CleanPage} />\n                        <Route path=\"/survey\" component={SurveyPage} />\n                        <Route\n                            path={'/add_money'}\n                            render={() => (\n                                <AddMoneyPage\n                                    updateBalance={this.updateBalance.bind(\n                                        this\n                                    )}\n                                />\n                            )}\n                        />\n                        <Route path={'/feedback'} component={FeedbackPage} />\n                        <Route\n                            path={'/getToken'}\n                            component={() => <div>ACCESS TOKEN MAN</div>}\n                        />\n                    </Switch>\n                </Fragment>\n            </Router>\n        )\n    }\n}\n\nfunction getQueryParam(param) {\n    const query = window.location.search.substring(1)\n    window.urlParams = query\n    const vars = query.split('&')\n    for (let i = 0; i < vars.length; i++) {\n        const pair = vars[i].split('=')\n        if (pair[0] === param) {\n            return pair[1]\n        }\n    }\n    throw new Error(`Query Variable ${param} not found`)\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Provider} from 'react-redux'\nimport App from './app/App'\nimport './static/styles/index.scss'\nimport * as serviceWorker from './serviceWorker'\nimport store from './store/index'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}