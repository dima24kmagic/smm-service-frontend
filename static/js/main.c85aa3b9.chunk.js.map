{"version":3,"sources":["app/components/CleanPage/PanelControl/HeaderControl.js","app/components/CleanPage/PanelControl/PanelControl.js","app/components/CleanPage/PublicGroup/PublicInfo.js","app/components/CleanPage/PublicGroup/ProgressBar.js","app/components/CleanPage/PublicGroup/PublicAvatar.js","services/services.api.js","app/components/CleanPage/InputModal.js","store/reducers/reducer.clean.js","store/reducers/reducer.survey.js","store/reducers/reducer.root.js","store/index.js","app/components/CleanPage/PublicGroup/Public.js","app/components/CleanPage/PublicGroup/AddPublicButton.js","app/components/CleanPage/VideoGuide.js","app/components/CleanPage/PublicGroup/GroupsModal/Group.js","app/components/CleanPage/PublicGroup/GroupsModal/GroupsModal.js","app/components/CleanPage/CleanPage.js","app/components/TopBar.js","app/components/AddMoneyPage/AddMoneyPage.js","app/components/FeedbackPage/FeedbackPage.js","app/components/SurveyPage/SurveyAddForm/SurveyAddForm.js","app/components/SurveyPage/SurveyPage.js","app/App.js","serviceWorker.js","index.js"],"names":["HeaderControl","_this$props","this","props","text","children","onClick","style","react_default","a","createElement","className","Component","PanelControl","_this","PanelControl_HeaderControl","visibility","fa","onCleanClick","PublicInfo","_Component","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","Fragment","peopleCount","onStartClean","xmlns","width","height","viewBox","fill","stroke","stroke-width","stroke-linecap","stroke-linejoin","d","cx","cy","r","x1","y1","x2","y2","deletedPeople","ProgressBar","status","concat","progress","React","PublicAvatar","src","url","alt","VK","window","undefined","init","API_URL","API","getUserGroups","getGroupsPromise","getGroupsForClean","axios","get","params","user_vk_id","user_id","auth_key","getGroupDogsCount","groupID","id","deleteGroupFromCleanQue","backEndID","console","log","delete","addGroupToCleanAndGetItData","publicID","post","vk_id","startCleanTask","public_ids","getCleaningTasks","getFreshPublic","public_id","setAccessToken","token","patch","access_token","getPollById","_ref","ownerID","pollID","getAnswersByAnswerID","_ref2","_ref7","rightAnswerID","Promise","resolve","reject","api","v","poll_id","answer_ids","data","error","getAnswersByAnswerIdPromise","getAccessToUserWall","callMethod","onSettingChange","onSettingChangePromise","getUserByIDs","_ref3","userIDs","getUserByIDPromise","then","_ref4","response","_ref5","user_ids","fields","_ref6","addCallback","settings","filter","extended","groups","normalizeVKGroupsData","items","array","map","converter","item","avatar_url","photo_100","name","InputModal","call","state","setState","swal","setActionValue","_this2","target","rel","href","type","placeholder","onChange","e","changeText","GET_USER_GROUPS","Load","Loaded","Errors","ADD_GROUP_IN_CLEAN_QUE","GET_GROUPS_FOR_CLEAN","initialState","loadingUserGroups","loadingCleanTasks","errors","cleanAllGroups","cb","allGroups","dispatch","groupsIDs","g","res","isAnyError","getAccessTokenFromUser","showNotEnoughMoneyModal","myInterval","setInterval","cleanTasks","payload","length","showCommentAlert","clearInterval","AddGroupInCleanQue","groupData","dogsCount","dogs_count","cleanGroupByID","DeleteGroupFromCleanQue","GetGroupsForCleanAndUserGroups","startLoading","groupsForClean","loadingProperty","title","icon","button","wrapper","document","ReactDOM","render","InputModal_InputModal","el","firstChild","content","buttons","confirm","link","slice","indexOf","money","delay","require","surveys","s1","s_url","s_right_answer","winners","loadingWinners","getRightAnswerID","poll","answers","getUsersThatResponseRight","users","GetPollById","s_key","parseInt","catch","err","onUrlChange","onAnswerChange","addSurveyForm","getPollOwnerID","split","GetWinners","balance","asyncToGenerator","regenerator_default","mark","_callee2","wrap","_context3","prev","next","showNotEnoughMoney","delegateYield","_callee","s_keys","_loop","i","_context2","keys","surveyData","_context","rightUsers","join","usersInfo","stop","_x","combineReducers","clean","action","objectSpread","forEach","group","inCleanQue","isLoadingInfo","cleanData","isCleaning","settedGroups","settedGroup","cleanTask","userGroups","groupsSetted","userGroup","dogs","followers","toggledGroups","_action$payload","groupWithData","_action$payload2","groupWithDogs","withCleanTask","allGroupsWithClean","defineProperty","surveysLength","surveyID","newArr","toConsumableArray","uniqueUsers","pos","history","createBrowserHistory","middleware","thunk","devToolsExtension","enhancers","push","composedEnhancers","compose","applyMiddleware","store","createStore","rootReducer","Public","PublicAvatar_PublicAvatar","ProgressBar_ProgressBar","PublicInfo_PublicInfo","connect","bindActionCreators","AddPublicButton","VideoGuide","frameBorder","allowFullScreen","Group","GroupsModal","querySelector","scrollHeight","close","GroupsModal_Group","CLEAN_TASK_ERRORS","CleanPage","publics","redirect","isAddGroupOpen","renderGroups","CleanPage_PublicGroup_Public","assign","toggleModal","setCleaningStateOnGroupByID","startCleanTasks","accessToken","timerId","updateCleanTasks","updateBalance","getPublicIds","setCleaningStateOnPublics","setGroups","_callee3","_this3","includes","getAccessTokenFromLink","getCleanTasks","publik","refreshPublicById","addCleanTaskToGroups","publicId","freshPublic","onClean","_callee10","_context10","_this4","startCleanPublicById","freshPublicIndex","findIndex","find","CleanPage_PanelControl_PanelControl","AddPublicButton_AddPublicButton","PublicGroup_GroupsModal_GroupsModal","Redirect","to","TopBar","NavLink","AddMoneyPage","method","htmlFor","autoComplete","FeedbackPage","Widgets","Comments","limit","attach","SurveyAddForm","SurveyPage","showAddForm","toggleAddForm","SurveyPage_SurveyAddForm_SurveyAddForm","winner","screen_name","first_name","last_name","getQueryParam","param","query","location","search","substring","urlParams","vars","pair","Error","Sentry","dsn","process","REACT_APP_SENTRY_DSN","App","newBalance","errorInfo","scope","setExtra","getUserBalance","setBalance","Router","basename","react","components_TopBar","Switch","Route","exact","path","components_CleanPage_CleanPage","bind","component","components_SurveyPage_SurveyPage","components_AddMoneyPage_AddMoneyPage","Boolean","hostname","match","es","app_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c85aa3b9.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\nclass HeaderControl extends Component {\n    render() {\n        const {text, children, onClick, style} = this.props\n        return (\n            <div\n                className=\"header-control\"\n                onClick={() => onClick()}\n                style={style}\n            >\n                <div className=\"header-control__icon\">{children}</div>\n                <span>{text}</span>\n            </div>\n        )\n    }\n}\n\nexport default HeaderControl\n","import React, {Component} from 'react'\nimport HeaderControl from './HeaderControl'\nimport {FaSync, FaTrashAlt, FaBroom} from 'react-icons/fa'\nclass PanelControl extends Component {\n    render() {\n        return (\n            <div className=\"panel-control\">\n                <HeaderControl text=\"Обновить\" style={{visibility: 'hidden'}}>\n                    <FaSync />\n                </HeaderControl>\n                <HeaderControl\n                    text=\"Очистить все\"\n                    onClick={() => this.props.onCleanClick()}\n                >\n                    <FaBroom />\n                </HeaderControl>\n                <HeaderControl text=\"Удалить\" style={{visibility: 'hidden'}}>\n                    <FaTrashAlt />\n                </HeaderControl>\n            </div>\n        )\n    }\n}\n\nexport default PanelControl\n","import React, {Component} from 'react'\nimport {FaBroom, FaUsers} from 'react-icons/fa'\nimport * as PropTypes from 'prop-types'\nimport HeaderControl from '../PanelControl/HeaderControl'\n\nexport class PublicInfo extends Component {\n    render() {\n        return <>\n            <div className=\"public__info__container public__info--all\">\n                <FaUsers/>\n                {this.props.peopleCount}\n            </div>\n            <div className=\"public__info__container\">\n                <HeaderControl\n                    text=\"Очистить\"\n                    onClick={() => this.props.onStartClean()}\n                >\n                    <FaBroom />\n                </HeaderControl>\n            </div>\n            <div className=\"public__info__container public__info--deleted\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n                     stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\n                     className=\"feather feather-user-x\">\n                    <path d=\"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2\"></path>\n                    <circle cx=\"8.5\" cy=\"7\" r=\"4\"></circle>\n                    <line x1=\"18\" y1=\"8\" x2=\"23\" y2=\"13\"></line>\n                    <line x1=\"23\" y1=\"8\" x2=\"18\" y2=\"13\"></line>\n                </svg>\n                {this.props.deletedPeople}\n            </div>\n        </>\n    }\n}\n\nPublicInfo.propTypes = {\n    peopleCount: PropTypes.any,\n    deletedPeople: PropTypes.any\n}","import React from 'react'\nimport './ProgressBar.css'\n\nclass ProgressBar extends React.Component {\n    render() {\n        return (\n            <div className=\"progress-position\">\n                <span className={'progress-status'}>{this.props.status}</span>\n                <div className=\"progress\">\n                    <div\n                        className=\"progress-bar main-progress-bar\"\n                        style={{width: `${this.props.progress}%`}}\n                    >\n                        <span className=\"percent\">{this.props.progress}%</span>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport {ProgressBar}\n","import React, {Component} from 'react'\n\nexport class PublicAvatar extends Component {\n    render() {\n        return <img\n            className=\"public__heading__img\"\n            src={this.props.url}\n            alt=\"pub img\"\n        />\n    }\n}","import axios from 'axios'\n\nlet VK = window.VK\nif (VK === undefined) {\n    VK = {\n        init: () => {}\n    }\n}\n\nconst API_URL = 'https://hot-dog.site/api'\nexport const API = {\n    getUserGroups: () => getGroupsPromise,\n    getGroupsForClean: () =>\n        axios.get(API_URL + '/getPublics', {\n            params: {\n                user_vk_id: window.user_id,\n                auth_key: window.auth_key\n            }\n        }),\n    getGroupDogsCount: (groupID) =>\n        axios.get(API_URL + '/getDogsCount', {\n            params: {\n                id: groupID,\n                user_vk_id: window.user_id,\n                auth_key: window.auth_key\n            }\n        }),\n    deleteGroupFromCleanQue: (backEndID) => {\n        console.log('DELETE REQUEST, id is:', backEndID)\n        return axios.delete(API_URL + '/deletePublic', {\n            id: backEndID,\n            user_vk_id: window.user_id,\n            auth_key: window.auth_key\n        })\n    },\n    addGroupToCleanAndGetItData: (publicID) =>\n        axios.post(API_URL + '/addPublic', {\n            user_vk_id: window.user_id,\n            auth_key: window.auth_key,\n            vk_id: publicID\n        }),\n    startCleanTask: (public_ids) =>\n        axios.post('https://hot-dog.site/api/startCleanTasks', {\n            user_vk_id: window.user_id,\n            auth_key: window.auth_key,\n            public_ids: public_ids\n        }),\n    getCleaningTasks: () =>\n        axios.get('https://hot-dog.site/api/getCleanTasks', {\n            params: {\n                user_vk_id: window.user_id,\n                auth_key: window.auth_key\n            }\n        }),\n    getFreshPublic: (public_id) =>\n        axios.get('https://hot-dog.site/api/refreshPublic', {\n            params: {\n                user_vk_id: window.user_id,\n                auth_key: window.auth_key,\n                id: public_id\n            }\n        }),\n    setAccessToken: (token) =>\n        axios.patch('https://hot-dog.site/api/setAccessToken', {\n            access_token: token,\n            user_vk_id: window.user_id,\n            auth_key: window.auth_key\n        }),\n    getPollById: ({ownerID, pollID}) => getPollById({ownerID, pollID}),\n    getAnswersByAnswerID: ({pollID, rightAnswerID}) =>\n        getAnswersByAnswerIdPromise({pollID, rightAnswerID}),\n    getAccessToUserWall: () => VK.callMethod('showSettingsBox', 8192),\n    onSettingChange: () => onSettingChangePromise(),\n    getUserByIDs: ({userIDs}) =>\n        getUserByIDPromise({userIDs}).then(({response}) => {\n            return response\n        })\n}\n\nconst getUserByIDPromise = ({userIDs}) => {\n    return new Promise((resolve, reject) => {\n        VK.api(\n            'users.get',\n            {v: '5.92', user_ids: userIDs, fields: 'screen_name'},\n            (data) => {\n                resolve(data)\n            }\n        )\n    })\n}\n\nconst getPollById = ({ownerID, pollID}) => {\n    return new Promise((resolve, reject) => {\n        VK.api('polls.getById', {v: '5.92', poll_id: pollID}, (data) => {\n            if (data.error) {\n                reject(data.error)\n            } else {\n                resolve(data)\n            }\n        })\n    })\n}\n\nfunction getAnswersByAnswerIdPromise({pollID, rightAnswerID}) {\n    return new Promise((resolve, reject) => {\n        VK.api(\n            'polls.getVoters',\n            {\n                v: '5.92',\n                poll_id: pollID,\n                answer_ids: rightAnswerID\n            },\n            (data) => {\n                if (data.error) {\n                    console.log('ERROR', data.error)\n                    reject(data.error)\n                } else {\n                    resolve(data)\n                }\n            }\n        )\n    })\n}\n\nconst onSettingChangePromise = () => {\n    return new Promise((resolve, reject) => {\n        VK.addCallback('onSettingsChanged', (settings) => {\n            resolve(settings)\n        })\n    })\n}\nconst getGroupsPromise = new Promise((resolve, reject) => {\n    VK.init(\n        () => {\n            VK.api(\n                'groups.get',\n                {\n                    filter: 'moder',\n                    extended: '1',\n                    fields: 'photo_100',\n                    v: '5.85'\n                },\n                (data) => {\n                    const groups = normalizeVKGroupsData(data.response.items)\n                    // const groupsCount = data.response.count\n                    // console.log(`Got ${groupsCount} publics from VK:`)\n                    // console.log(groups)\n                    resolve(groups)\n                }\n            )\n        },\n        () => {\n            console.log('VK API initialization failed')\n            reject('Groups fetch failed')\n        },\n        '5.85'\n    )\n})\n\nconst normalizeVKGroupsData = (array) => {\n    return array.map(converter)\n}\n\nconst converter = (item) => {\n    // noinspection JSUnresolvedVariable\n    return {\n        avatar_url: item.photo_100,\n        id: item.id,\n        name: item.name\n    }\n}\n","import React from 'react'\nimport swal from 'sweetalert'\nimport './InputModal.css'\n\nconst OAUTH_LINK =\n    'https://oauth.vk.com/authorize?client_id=6726221&redirect_uri=https://oauth.vk.com/blank.html&display=page&response_type=token&v=5.85&scope=groups,wall,offline'\nconst PLACEHOLDER_ACCESS_TOKEN =\n    'https://oauth.vk.com/blank.html#access_token=1383bc6d5df7bf74655b531297c71617b2345687ca&expires_in=0&user_id=159204098'\n\nclass InputModal extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {text: ''}\n    }\n\n    changeText(text) {\n        this.setState({text: text})\n        swal.setActionValue(text)\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"modal__text\">\n                    <p>Нет доступа к управлению вашими сообществами</p>\n                    <p>\n                        Для решения этой проблемы перейдите, по{' '}\n                        <a\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            href={OAUTH_LINK}\n                        >\n                            этой ссылке\n                        </a>\n                        .\n                    </p>\n                    <p>Разрешите доступ нашему приложению</p>\n                    <p>\n                        ВКонтакте покажет страницу, сообщающую, что не стоит\n                        передавать данные из адресной строки\n                    </p>\n                    <p>\n                        Однако, это абсолютно безопасно в случае с нашим\n                        приложением\n                    </p>\n                    <p>Скопируйте целиком URL и вставьте в поле ниже:</p>\n                    <input\n                        type=\"text\"\n                        placeholder={PLACEHOLDER_ACCESS_TOKEN}\n                        value={this.state.text}\n                        onChange={(e) => {\n                            this.changeText(e.target.value)\n                        }}\n                    />\n                    <p>\n                        Это необходимо для получения доступа к удалению\n                        заблокированных пользователей\n                    </p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport {InputModal}\n","import {API} from '../../services/services.api'\nimport swal from 'sweetalert'\nimport ReactDOM from 'react-dom'\nimport {InputModal} from '../../app/components/CleanPage/InputModal'\nimport React from 'react'\n\nexport const GET_USER_GROUPS = {\n    Load: 'groups/USER_GROUPS_LOAD',\n    Loaded: 'groups/USER_GROUPS_LOADED',\n    Errors: 'groups/USER_GROUPS_ERRORS'\n}\nexport const ADD_GROUP_IN_CLEAN_QUE = {\n    click: 'ADD_GROUP_IN_CLEAN_QUE_CLICK',\n    added: 'ADD_GROUP_IN_CLEAN_QUE_ADD_TO_SERVER'\n}\nexport const GET_DOGS_COUNT = 'GET_DOGS_COUNT '\nexport const DELETE_GROUP_FROM_CLEAN_QUE = 'DELETE_GROUP_FROM_CLEAN_QUE'\nexport const GET_GROUPS_FOR_CLEAN = {\n    Load: 'groups/GET_GROUPS_FOR_CLEAN_LOAD',\n    Loaded: 'groups/GET_GROUPS_FOR_CLEAN_LOADED',\n    Errors: 'groups/GET_GROUPS_FOR_CLEAN_ERRORS'\n}\nexport const CLEAN_GROUP_BY_ID = 'CLEAN_GROUP_BY_ID'\nexport const UPDATE_CLEANING_STATE = 'UPDATE_CLEANING_STATE'\nexport const CLEAN_ALL_GROUPS = 'CLEAN_ALL_GROUPS'\n\nconst initialState = {\n    groups: {\n        data: [],\n        loadingUserGroups: true,\n        loadingCleanTasks: true,\n        errors: []\n    }\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case GET_GROUPS_FOR_CLEAN.Load: {\n            return {\n                ...state,\n                groups: {\n                    ...state.groups,\n                    loadingCleanTasks: true\n                }\n            }\n        }\n        case GET_GROUPS_FOR_CLEAN.Loaded: {\n            const groupsForClean = action.payload\n            groupsForClean.forEach((group) => {\n                group.inCleanQue = true\n                group.isLoadingInfo = false\n                group.cleanData = {\n                    isCleaning: false\n                }\n            })\n            return {\n                ...state,\n                groups: {\n                    ...state.groups,\n                    data: groupsForClean,\n                    loadingCleanTasks: false\n                }\n            }\n        }\n        case UPDATE_CLEANING_STATE: {\n            const cleanTasks = action.payload\n            if (cleanTasks.length === 0) {\n                return state\n            } else {\n                let settedGroups = state.groups.data.map((g) => g)\n                settedGroups.forEach((settedGroup) => {\n                    cleanTasks.forEach((cleanTask) => {\n                        if (settedGroup.backEndID === cleanTask.public_id) {\n                            if (cleanTask.status === 'Завершили') {\n                                settedGroup.cleanData = {\n                                    isCleaning: false\n                                }\n                            } else {\n                                settedGroup.cleanData = {\n                                    isCleaning: true,\n                                    progress: cleanTask.progress,\n                                    status: cleanTask.status\n                                }\n                            }\n                        }\n                    })\n                })\n                return {\n                    ...state,\n                    groups: {\n                        ...state.groups,\n                        data: settedGroups\n                    }\n                }\n            }\n        }\n        case GET_USER_GROUPS.Load: {\n            return {\n                ...state,\n                groups: {\n                    ...state.groups,\n                    loadingUserGroups: true\n                }\n            }\n        }\n        case GET_USER_GROUPS.Loaded: {\n            const userGroups = action.payload\n            const groupsSetted = state.groups.data\n            userGroups.forEach((group) => {\n                group.inCleanQue = false\n                group.isLoadingInfo = true\n            })\n            userGroups.forEach((userGroup) => {\n                groupsSetted.forEach((settedGroup) => {\n                    if (userGroup.id === settedGroup.vk_id) {\n                        userGroup.inCleanQue = settedGroup.inCleanQue\n                        userGroup.backEndID = settedGroup.id\n                        userGroup.dogs = settedGroup.dogs\n                        userGroup.followers = settedGroup.followers\n                        userGroup.cleanData = settedGroup.cleanData\n                    }\n                })\n            })\n            return {\n                ...state,\n                groups: {\n                    data: userGroups,\n                    loadingUserGroups: false\n                }\n            }\n        }\n        case ADD_GROUP_IN_CLEAN_QUE.click:\n            const groupID = action.payload\n            let toggledGroups = state.groups.data.map((group) => {\n                if (group.id === groupID) {\n                    return {\n                        ...group,\n                        inCleanQue: true,\n                        cleanData: {\n                            isCleaning: false\n                        }\n                    }\n                } else {\n                    return group\n                }\n            })\n            return {\n                ...state,\n                groups: {\n                    ...state.groups,\n                    data: toggledGroups\n                }\n            }\n        case ADD_GROUP_IN_CLEAN_QUE.added: {\n            const {groupData, groupID} = action.payload\n            let groupWithData = state.groups.data.map((group) => {\n                if (group.id === groupID) {\n                    return {\n                        ...group,\n                        ...groupData,\n                        dogs: 'Анализ...',\n                        backEndID: groupData.id\n                    }\n                } else {\n                    return group\n                }\n            })\n            return {\n                ...state,\n                groups: {\n                    ...state.groups,\n                    data: groupWithData\n                }\n            }\n        }\n        case GET_DOGS_COUNT: {\n            const {dogsCount, groupID} = action.payload\n            let groupWithDogs = state.groups.data.map((group) => {\n                if (group.vk_id === groupID) {\n                    return {\n                        ...group,\n                        dogs: dogsCount\n                    }\n                } else {\n                    return group\n                }\n            })\n            return {\n                ...state,\n                groups: {\n                    ...state.groups,\n                    data: groupWithDogs\n                }\n            }\n        }\n        case DELETE_GROUP_FROM_CLEAN_QUE: {\n            const groupID = action.payload\n            let toggledGroups = state.groups.data.map((group) => {\n                if (group.id === groupID) {\n                    return {...group, inCleanQue: false}\n                } else {\n                    return group\n                }\n            })\n            return {...state, groups: {...state.groups, data: toggledGroups}}\n        }\n        case CLEAN_GROUP_BY_ID: {\n            let groupID = action.payload\n            let withCleanTask = state.groups.data.map((group) => {\n                if (group.backEndID === groupID) {\n                    return {\n                        ...group,\n                        cleanData: {\n                            isCleaning: true,\n                            progress: 0,\n                            status: 'Отправляем запрос'\n                        }\n                    }\n                } else {\n                    return group\n                }\n            })\n            return {\n                ...state,\n                groups: {\n                    ...state.groups,\n                    data: withCleanTask\n                }\n            }\n        }\n        case CLEAN_ALL_GROUPS: {\n            const allGroupsWithClean = state.groups.data.map((group) => {\n                API.startCleanTask([group.backEndID])\n                return {\n                    ...group,\n                    cleanData: {\n                        isCleaning: true,\n                        progress: 0,\n                        status: 'Отправляем запрос'\n                    }\n                }\n            })\n            return {\n                ...state,\n                groups: {\n                    ...state.groups,\n                    data: allGroupsWithClean\n                }\n            }\n        }\n        default:\n            return state\n    }\n}\n\nexport const cleanAllGroups = (cb, allGroups) => {\n    return (dispatch) => {\n        const groupsIDs = allGroups.map((g) => {\n            return g.backEndID\n        })\n        API.startCleanTask(groupsIDs).then((res) => {\n            let isAnyError\n            if (res.data.error) {\n                isAnyError = res.data.error.id\n            }\n            switch (isAnyError) {\n                case 1:\n                    getAccessTokenFromUser()\n                    break\n                case 2:\n                    showNotEnoughMoneyModal(res.error.value)\n                    break\n                default:\n                    dispatch({\n                        type: CLEAN_ALL_GROUPS\n                    })\n                    let myInterval = setInterval(() => {\n                        API.getCleaningTasks().then((r) => {\n                            const cleanTasks = r.data\n                            dispatch({\n                                type: UPDATE_CLEANING_STATE,\n                                payload: cleanTasks\n                            })\n                            if (cleanTasks.length === 0) {\n                                showCommentAlert(cb)\n                                clearInterval(myInterval)\n                            }\n                        })\n                    }, 500)\n            }\n        })\n    }\n}\n\nexport const AddGroupInCleanQue = (groupID) => {\n    return (dispatch) => {\n        dispatch({\n            type: ADD_GROUP_IN_CLEAN_QUE.click,\n            payload: groupID\n        })\n        API.addGroupToCleanAndGetItData(groupID).then((r) => {\n            const groupData = r.data\n            dispatch({\n                type: ADD_GROUP_IN_CLEAN_QUE.added,\n                payload: {groupData, groupID}\n            })\n            API.getGroupDogsCount(groupData.id).then((r) => {\n                const dogsCount = r.data.dogs_count\n                dispatch({\n                    type: GET_DOGS_COUNT,\n                    payload: {dogsCount, groupID}\n                })\n            })\n        })\n    }\n}\n\nexport const cleanGroupByID = (groupID, cb) => {\n    return (dispatch) => {\n        API.startCleanTask([groupID]).then((res) => {\n            if (res.data.error) {\n                switch (res.data.error.id) {\n                    case 1:\n                        getAccessTokenFromUser()\n                        break\n                    case 2:\n                        showNotEnoughMoneyModal(res.error.value)\n                        break\n                    default:\n                }\n            } else {\n                dispatch({\n                    type: CLEAN_GROUP_BY_ID,\n                    payload: groupID\n                })\n                let myInterval = setInterval(() => {\n                    API.getCleaningTasks().then((r) => {\n                        const cleanTasks = r.data\n                        dispatch({\n                            type: UPDATE_CLEANING_STATE,\n                            payload: cleanTasks\n                        })\n                        if (cleanTasks.length === 0) {\n                            showCommentAlert(cb)\n                            clearInterval(myInterval)\n                        }\n                    })\n                }, 500)\n            }\n        })\n    }\n}\n\nexport const DeleteGroupFromCleanQue = (groupID, backEndID) => {\n    return (dispatch) => {\n        dispatch({\n            type: DELETE_GROUP_FROM_CLEAN_QUE,\n            payload: groupID\n        })\n        API.deleteGroupFromCleanQue(backEndID).then((r) => {})\n    }\n}\n\nexport const GetGroupsForCleanAndUserGroups = () => {\n    return (dispatch) => {\n        startLoading(GET_GROUPS_FOR_CLEAN, dispatch)\n        API.getGroupsForClean().then((r) => {\n            const groupsForClean = r.data\n            dispatch({\n                type: GET_GROUPS_FOR_CLEAN.Loaded,\n                payload: groupsForClean\n            })\n            let myInterval = setInterval(() => {\n                API.getCleaningTasks().then((r) => {\n                    const cleanTasks = r.data\n                    dispatch({\n                        type: UPDATE_CLEANING_STATE,\n                        payload: cleanTasks\n                    })\n                    if (cleanTasks.length === 0) {\n                        clearInterval(myInterval)\n                    }\n                })\n            }, 500)\n            startLoading(GET_USER_GROUPS, dispatch)\n            const groups = API.getUserGroups()\n            groups.then((res) => {\n                dispatch({type: GET_USER_GROUPS.Loaded, payload: res})\n            })\n        })\n    }\n}\n\nconst startLoading = (loadingProperty, dispatch) => {\n    dispatch({\n        type: loadingProperty.Load\n    })\n}\n\nfunction showCommentAlert(cb) {\n    console.log('Comment alert')\n    const response = swal({\n        title: 'Спасибо!',\n        icon: 'success',\n        text: 'Оставьте, пожалуйста, отзыв о сервисе :)',\n        button: 'Хорошо'\n    })\n    response.then((r) => {\n        console.log('R IS:', r)\n        if (r === true) {\n            if (cb) {\n                cb()\n            }\n        }\n    })\n}\n\nfunction getAccessTokenFromUser() {\n    let wrapper = window.document.createElement('div')\n    ReactDOM.render(<InputModal />, wrapper)\n    let el = wrapper.firstChild\n    const response = swal({\n        title: 'Упс. Мы не можем очистить ваши сообщества',\n        content: el,\n        buttons: {\n            confirm: {\n                text: 'Сохранить и запустить!',\n                value: ''\n            }\n        }\n    })\n    response.then((r) => {\n        const token = getAccessTokenFromLink(r)\n        API.setAccessToken(token)\n    })\n}\nfunction showNotEnoughMoneyModal(money, cb) {\n    const response = swal({\n        title: 'Упс.. Недостаточно денег',\n        icon: 'error',\n        text: `Для очистки сообществ нужно еще ${money}р.\\nПополните, пожалуйста, баланс`,\n        button: {text: 'Пополнить'}\n    })\n    response.then((r) => {\n        if (r === true) {\n            console.log('GO TO ADD MONEY')\n        }\n    })\n}\n\nfunction getAccessTokenFromLink(link) {\n    const searchStartStr = '#access_token='\n    const searchEndStr = '&expires_in='\n    return link.slice(\n        link.indexOf(searchStartStr) + searchStartStr.length,\n        link.indexOf(searchEndStr)\n    )\n}\n","import {API} from '../../services/services.api'\nimport swal from 'sweetalert'\nconst delay = require('delay')\n\nconst ON_URL_CHANGE = 'ON_URL_CHANGE'\nconst ON_ANSWER_CHANGE = 'ON_ANSWER_CHANGE'\nconst ADD_SURVEY_FORM = 'ADD_SURVEY_FORM'\nconst GET_WINNERS = 'GET_WINNERS'\nconst END_LOADING_WINNERS = 'END_LOADING_WINNERS'\nconst GET_POLL_BY_ID = 'GET_POLL_BY_ID'\n\nconst initialState = {\n    surveys: {\n        s1: {\n            s_url: '',\n            s_right_answer: ''\n        }\n    },\n    winners: [],\n    loadingWinners: true\n}\n\nexport default (state = initialState, action) => {\n    const {type, payload} = action\n    switch (type) {\n        case ON_ANSWER_CHANGE: {\n            const {s_key, value} = payload\n            return {\n                ...state,\n                surveys: {\n                    ...state.surveys,\n                    [s_key]: {\n                        ...state.surveys[s_key],\n                        s_right_answer: value\n                    }\n                }\n            }\n        }\n        case ON_URL_CHANGE: {\n            const {s_key, value} = payload\n            return {\n                ...state,\n                surveys: {\n                    ...state.surveys,\n                    [s_key]: {\n                        ...state.surveys[s_key],\n                        s_url: value\n                    }\n                }\n            }\n        }\n        case ADD_SURVEY_FORM: {\n            let surveysLength = Object.keys(state.surveys).length\n            const surveyID = 's' + surveysLength + 1\n            console.log('SURVEY_ID:', surveyID, surveysLength, state.surveys)\n            return {\n                ...state,\n                surveys: {\n                    ...state.surveys,\n                    [surveyID]: {s_url: '', s_right_answer: ''}\n                }\n            }\n        }\n        case GET_WINNERS: {\n            const winners = payload\n            const newArr = [...state.winners, ...winners]\n            const uniqueUsers = newArr.filter(function(item, pos) {\n                return newArr.indexOf(item) === pos\n            })\n            console.log('UNIQUE USERS:', uniqueUsers)\n            return {\n                ...state,\n                winners: uniqueUsers,\n                loadingWinners: true\n            }\n        }\n        case END_LOADING_WINNERS: {\n            return {\n                ...state,\n                loadingWinners: false\n            }\n        }\n        default:\n            return state\n    }\n}\n\nfunction getRightAnswerID({poll, s_right_answer}) {\n    const rightAnswer = poll.answers[s_right_answer - 1]\n    return rightAnswer.id\n}\n\nfunction getUsersThatResponseRight({pollID, rightAnswerID}) {\n    return API.getAnswersByAnswerID({pollID, rightAnswerID}).then(\n        ({response}) => {\n            const rightUsers = response[0].users.items\n            return rightUsers\n        }\n    )\n}\n\nexport const GetPollById = ({ownerID, pollID, s_key, s_right_answer}) => {\n    ownerID = parseInt(ownerID)\n    pollID = parseInt(pollID)\n    return API.getPollById({ownerID, pollID})\n        .then(({response}) => {\n            return response\n        })\n        .catch((err) => {\n            API.getAccessToUserWall()\n            return API.onSettingChange().then((r) => {\n                return API.getPollById({ownerID, pollID}).then(({response}) => {\n                    return response\n                })\n            })\n        })\n}\n\nexport const onUrlChange = (e, s_key) => {\n    return (dispatch) => {\n        const value = e.target.value\n        dispatch({\n            type: ON_URL_CHANGE,\n            payload: {value, s_key}\n        })\n    }\n}\n\nexport const onAnswerChange = (e, s_key) => {\n    return (dispatch) => {\n        const value = e.target.value\n        dispatch({\n            type: ON_ANSWER_CHANGE,\n            payload: {value, s_key}\n        })\n    }\n}\n\nexport const addSurveyForm = () => {\n    return (dispatch) => {\n        dispatch({\n            type: ADD_SURVEY_FORM\n        })\n    }\n}\n\nfunction getPollID(s_url) {\n    const ownerAndPollID = s_url.split('poll-')[1]\n    return ownerAndPollID.split('_')[1]\n}\n\nfunction getPollOwnerID(s_url) {\n    const ownerAndPollID = s_url.split('poll-')[1]\n    return ownerAndPollID.split('_')[0]\n}\n\nconst MIMNAL_BALANCE_FOR_SURVEY = 100\n\nexport const GetWinners = (surveys, balance, cb) => {\n    return async (dispatch) => {\n        if (balance < MIMNAL_BALANCE_FOR_SURVEY) {\n            showNotEnoughMoney(cb)\n        } else {\n            const s_keys = Object.keys(surveys).map((s_key) => s_key)\n            for (let i = 0; i < s_keys.length; i++) {\n                const s_key = s_keys[i]\n                const surveyData = surveys[s_key]\n                const pollID = getPollID(surveyData.s_url)\n                const ownerID = getPollOwnerID(surveyData.s_url)\n                const s_right_answer = surveys[s_key].s_right_answer\n                GetPollById({ownerID, pollID, s_key, s_right_answer}).then(\n                    (poll) => {\n                        const rightAnswerID = getRightAnswerID({\n                            poll,\n                            s_right_answer\n                        })\n                        getUsersThatResponseRight({pollID, rightAnswerID}).then(\n                            (rightUsers) => {\n                                console.log('RIGHT USERS:', rightUsers)\n                                let userIDs = rightUsers.join()\n                                console.log('USER IDS:', userIDs)\n                                API.getUserByIDs({userIDs}).then(\n                                    (usersInfo) => {\n                                        console.log('USERS INFO:', usersInfo)\n                                        dispatch({\n                                            type: GET_WINNERS,\n                                            payload: usersInfo\n                                        })\n                                        if (i === s_keys.length - 1) {\n                                            dispatch({\n                                                type: END_LOADING_WINNERS\n                                            })\n                                        }\n                                    }\n                                )\n                            }\n                        )\n                    }\n                )\n                await delay(400)\n            }\n        }\n    }\n}\n\nfunction showNotEnoughMoney(cb) {\n    const response = swal({\n        title: 'Спасибо!',\n        text: 'Чтобы продолжить, перейдите, чтобы пополните ваш баланс',\n        button: 'Перейти'\n    })\n    response.then((r) => {\n        if (r) {\n            if (cb) {\n                cb()\n            }\n        }\n    })\n}\n","import {combineReducers} from 'redux'\nimport clean from './reducer.clean'\nimport surveys from './reducer.survey'\nexport default combineReducers({\n    clean,\n    surveys\n})\n","import {createStore, applyMiddleware, compose} from 'redux'\nimport logger from 'redux-logger'\nimport thunk from 'redux-thunk'\nimport {createBrowserHistory} from 'history'\nimport rootReducer from './reducers/reducer.root'\n\nexport const history = createBrowserHistory()\n\nconst middleware = [thunk]\nconst devToolsExtension = window.devToolsExtension\nconst enhancers = []\n\nif (typeof devToolsExtension === 'function') {\n    enhancers.push(devToolsExtension())\n}\n\nconst composedEnhancers = compose(\n    applyMiddleware(...middleware),\n    ...enhancers\n)\n\nconst initialState = {}\n\nconst store = createStore(rootReducer, initialState, composedEnhancers)\n\nexport default store\n","import React, {Component} from 'react'\nimport {PublicInfo} from './PublicInfo'\nimport {ProgressBar} from './ProgressBar'\nimport {PublicAvatar} from './PublicAvatar'\nimport './Public.css'\nimport PropTypes from 'prop-types'\nimport {bindActionCreators} from 'redux'\nimport {connect} from 'react-redux'\nimport {cleanGroupByID} from '../../../../store/reducers/reducer.clean'\nimport {history} from '../../../../store'\n\nclass Public extends Component {\n    static propTypes = {\n        id: PropTypes.number.isRequired,\n        vk_id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n        avatar_url: PropTypes.string.isRequired,\n        followers: PropTypes.number.isRequired,\n        dogs: PropTypes.oneOf(PropTypes.number, PropTypes.string).isRequired,\n        cleanData: PropTypes.shape({\n            isCleaning: PropTypes.bool.isRequired,\n            progress: PropTypes.number,\n            status: PropTypes.string\n        }).isRequired,\n        onClean: PropTypes.func.isRequired\n    }\n\n    render() {\n        const {backEndID, cleanGroupByID} = this.props;\n        return (\n            <div className=\"public-wrapper\">\n                <div className=\"public\">\n                    <div className=\"public__heading\">\n                        <PublicAvatar url={this.props.avatar_url} />\n                        <div className=\"public__heading__name\">\n                            {this.props.name}\n                        </div>\n                    </div>\n                    <div className=\"public__info\">\n                        {this.props.cleanData.isCleaning ? (\n                            <ProgressBar\n                                progress={this.props.cleanData.progress}\n                                status={this.props.cleanData.status}\n                            />\n                        ) : (\n                            <PublicInfo\n                                peopleCount={this.props.followers}\n                                deletedPeople={this.props.dogs}\n                                onStartClean={() => {\n                                    cleanGroupByID(backEndID, () => {history.push(\"/feedback\")})\n                                }}\n                            />\n                        )}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nconst mapDispatchToProps = dispatch => bindActionCreators({cleanGroupByID}, dispatch)\n\nexport default connect(null, mapDispatchToProps)(Public);\n","import React, {Component} from 'react'\nimport * as PropTypes from 'prop-types'\n\nexport class AddPublicButton extends Component {\n    render() {\n        return <div\n            className=\"btn btn__add\"\n            onClick={this.props.onClick}\n        >\n            Добавить Сообщество\n        </div>\n    }\n}\n\nAddPublicButton.propTypes = {onClick: PropTypes.func}","import React from 'react'\n\nexport function VideoGuide() {\n    return (\n        <iframe\n            title={\"video guide\"}\n            src=\"//vk.com/video_ext.php?oid=-171466987&id=456239020&hash=2a4b21d6648495d0&hd=1\"\n            width=\"426\"\n            height=\"210\"\n            frameBorder=\"0\"\n            allowFullScreen\n        />\n    )\n}","import React, {Component} from 'react'\nimport {bindActionCreators} from 'redux'\nimport {connect} from 'react-redux'\nimport {\n    AddGroupInCleanQue,\n    DeleteGroupFromCleanQue\n} from '../../../../../store/reducers/reducer.clean'\n\nclass Group extends Component {\n    render() {\n        const {group, AddGroupInCleanQue, DeleteGroupFromCleanQue} = this.props\n        return (\n            <div className=\"group\">\n                <div className=\"group__details\">\n                    <img src={group.avatar_url} alt=\"avatar\" />\n                    <span className=\"ellipsis\">{group.name}</span>\n                </div>\n                <span\n                    className={`plus-sign ${\n                        group.inCleanQue ? 'plus-sign--cris' : ''\n                    }`}\n                    onClick={() => {\n                        if (group.inCleanQue) {\n                            console.log('Group for deleting', group)\n                            DeleteGroupFromCleanQue(group.id, group.backEndID)\n                        } else {\n                            AddGroupInCleanQue(group.id)\n                        }\n                    }}\n                />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({})\n\nconst mapDispatchToProps = (dispatch) =>\n    bindActionCreators(\n        {\n            AddGroupInCleanQue,\n            DeleteGroupFromCleanQue\n        },\n        dispatch\n    )\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Group)\n","import React, {Component} from 'react'\nimport './modal.scss'\nimport Group from './Group'\n\nclass GroupsModal extends Component {\n    componentDidMount() {\n        const html = document.querySelector(\"html\");\n        const height = html.scrollHeight;\n        document.querySelector('.modal__bg').style.height = `${height}px`\n    }\n\n    render() {\n        const {groups, close} = this.props\n        return (\n            <div className=\"modal\">\n                <div className=\"modal__bg\" onClick={close} />\n                <div className=\"modal__body\">\n                    <div className=\"modal__body__text\">Выберите сообщество</div>\n                    <div className=\"modal__body__content\">\n                        {groups.map((group) => {\n                            return <Group group={group} />\n                        })}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default GroupsModal\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport PanelControl from './PanelControl/PanelControl'\nimport Public from './PublicGroup/Public'\nimport {bindActionCreators} from 'redux'\nimport {AddPublicButton} from './PublicGroup/AddPublicButton'\nimport swal from 'sweetalert'\nimport axios from 'axios'\nimport {\n    GetGroupsForCleanAndUserGroups,\n    cleanGroupByID,\n    cleanAllGroups\n} from '../../../store/reducers/reducer.clean'\nimport ReactDOM from 'react-dom'\nimport {InputModal} from './InputModal'\nimport {VideoGuide} from './VideoGuide'\nimport {Redirect} from 'react-router-dom'\nimport GroupsModal from './PublicGroup/GroupsModal/GroupsModal'\nimport {history} from '../../../store'\n\nconst CLEAN_TASK_ERRORS = ['Возникла ошибка', 'Завершили'] // errors? finished != error\n\nclass CleanPage extends Component {\n    state = {\n        publics: [],\n        redirect: false,\n        isAddGroupOpen: false\n    }\n\n    componentWillMount() {\n        const {GetGroupsForCleanAndUserGroups} = this.props\n        GetGroupsForCleanAndUserGroups()\n    }\n\n    renderGroups = (groups) => {\n        if (!groups.length) return null\n        return groups.map(\n            (group) => group.inCleanQue && <Public {...group} key={group.id} />\n        )\n    }\n\n    async startCleanPublicById(publicID) {\n        const {setCleaningStateOnGroupByID} = this.props\n        const response = await this.startCleanTasks([publicID])\n        if ('error' in response) {\n            if (response.error.id === 1) {\n                const accessToken = await this.getAccessTokenFromUser()\n                await this.setAccessToken(accessToken)\n                return await this.onStartClean()\n            } else if (response.error.id === 2) {\n                await this.showNotEnoughMoneyModal(response.error.value)\n            }\n        } else {\n            setCleaningStateOnGroupByID(publicID)\n            // this.setGroups(publics)\n            this.timerId = setInterval(async () => {\n                await this.updateCleanTasks()\n                console.log(this)\n                await this.props.updateBalance()\n            }, 1500)\n        }\n    }\n\n    async onStartClean() {\n        const public_ids = this.getPublicIds()\n        const response = await this.startCleanTasks(public_ids)\n        if ('error' in response) {\n            if (response.error.id === 1) {\n                const accessToken = await this.getAccessTokenFromUser()\n                await this.setAccessToken(accessToken)\n                return await this.onStartClean()\n            } else if (response.error.id === 2) {\n                await this.showNotEnoughMoneyModal(response.error.value)\n            }\n        } else {\n            const publics = this.setCleaningStateOnPublics()\n            this.setGroups(publics)\n            this.timerId = setInterval(async () => {\n                await this.updateCleanTasks()\n                await this.props.updateBalance()\n            }, 1500)\n        }\n    }\n\n    async startCleanTasks(public_ids) {\n        return (await axios.post('https://hot-dog.site/api/startCleanTasks', {\n            user_vk_id: window.user_id,\n            auth_key: window.auth_key,\n            public_ids: public_ids\n        })).data\n    }\n\n    cleanTaskIsFinished(cleanTask) {\n        return CLEAN_TASK_ERRORS.includes(cleanTask.status)\n    }\n\n    getPublicIds() {\n        return this.state.publics.map((item) => item.id)\n    }\n\n    async getAccessTokenFromUser() {\n        let wrapper = window.document.createElement('div')\n        ReactDOM.render(<InputModal />, wrapper)\n        let el = wrapper.firstChild\n        const response = await swal({\n            title: 'Упс. Мы не можем очистить ваши сообщества',\n            content: el,\n            buttons: {\n                confirm: {\n                    text: 'Сохранить и запустить!',\n                    value: ''\n                }\n            }\n        })\n        return this.getAccessTokenFromLink(response)\n    }\n\n    async setAccessToken(token) {\n        return await axios.patch('https://hot-dog.site/api/setAccessToken', {\n            access_token: token,\n            user_vk_id: window.user_id,\n            auth_key: window.auth_key\n        })\n    }\n\n    async getCleanTasks() {\n        return (await axios.get('https://hot-dog.site/api/getCleanTasks', {\n            params: {\n                user_vk_id: window.user_id,\n                auth_key: window.auth_key\n            }\n        })).data\n    }\n\n    async updateCleanTasks() {\n        const cleanTasks = await this.getCleanTasks()\n        if (!(cleanTasks && cleanTasks.length)) {\n            clearInterval(this.timerId)\n            for (const publik of this.state.publics) {\n                await this.refreshPublicById(publik.id)\n            }\n            await this.showCommentAlert()\n            return\n        }\n        const publics = this.addCleanTaskToGroups(\n            this.state.publics,\n            cleanTasks\n        )\n        this.setGroups(publics)\n    }\n\n    async refreshPublicById(publicId) {\n        const freshPublic = await this.getFreshPublic(publicId)\n        freshPublic.cleanData = {\n            isCleaning: false\n        }\n        freshPublic.onClean = async () => {\n            await this.startCleanPublicById(freshPublic.id)\n        }\n        const {publics} = this.state\n        const freshPublicIndex = publics.findIndex(\n            (item) => item.id === publicId\n        )\n        publics[freshPublicIndex] = freshPublic\n        this.setGroups(publics)\n    }\n\n    async getFreshPublic(public_id) {\n        return (await axios.get('https://hot-dog.site/api/refreshPublic', {\n            params: {\n                user_vk_id: window.user_id,\n                auth_key: window.auth_key,\n                id: public_id\n            }\n        })).data\n    }\n\n    getAccessTokenFromLink(link) {\n        const searchStartStr = '#access_token='\n        const searchEndStr = '&expires_in='\n        return link.slice(\n            link.indexOf(searchStartStr) + searchStartStr.length,\n            link.indexOf(searchEndStr)\n        )\n    }\n\n    getPublicById(publics, public_id) {\n        return publics.find((item) => item.id === public_id)\n    }\n\n    async showNotEnoughMoneyModal(money) {\n        const response = await swal({\n            title: 'Упс.. Недостаточно денег',\n            icon: 'error',\n            text: `Для очистки сообществ нужно еще ${money}р.\\nПополните, пожалуйста, баланс`,\n            button: {text: 'Пополнить'}\n        })\n        if (response) this.setState({redirect: '/add_money'})\n    }\n\n    async showCommentAlert() {\n        const response = await swal({\n            title: 'Спасибо!',\n            icon: 'success',\n            text: 'Оставьте, пожалуйста, отзыв о сервисе :)',\n            button: 'Хорошо'\n        })\n        if (response) this.setState({redirect: '/feedback'})\n    }\n\n    toggleModal = () => {\n        this.setState({\n            isAddGroupOpen: !this.state.isAddGroupOpen\n        })\n    }\n\n    render() {\n        const {isAddGroupOpen} = this.state\n        const {groups, cleanAllGroups} = this.props\n\n        return (\n            <div className=\"clean\">\n                <PanelControl\n                    onCleanClick={() =>\n                        cleanAllGroups(() => {\n                            history.push('/feedback')\n                        }, groups)\n                    }\n                />\n\n                <div className=\"publics\">\n                    {groups && this.renderGroups(groups)}\n                </div>\n\n                <AddPublicButton onClick={this.toggleModal} />\n\n                {isAddGroupOpen && (\n                    <GroupsModal close={this.toggleModal} groups={groups} />\n                )}\n\n                <VideoGuide />\n\n                {this.state.redirect && (\n                    <Redirect to={this.state.redirect} push />\n                )}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({clean}) => ({\n    groups: clean.groups.data,\n    cleanTasks: clean.cleanTasks\n})\n\nconst mapDispatchToProps = (dispatch) =>\n    bindActionCreators(\n        {\n            GetGroupsForCleanAndUserGroups,\n            setCleaningStateOnGroupByID: cleanGroupByID,\n            cleanAllGroups\n        },\n        dispatch\n    )\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CleanPage)\n","import React, {Component} from 'react'\nimport {NavLink} from 'react-router-dom'\nimport '../fonts/fontello/fontello.css'\n\nclass TopBar extends Component {\n    render() {\n        return (\n            <header className=\"nav\">\n                <div className=\"nav__info\">\n                    <nav>\n                        <NavLink className={'nav__item'} to={'/feedback'}>\n                            Отзывы\n                        </NavLink>\n                        <NavLink className={'nav__item'} to={'/add_money'}>\n                            Пополнить баланс\n                        </NavLink>\n                    </nav>\n                    <div>\n                        <span className=\"balance\">\n                            <i className=\"icon-rouble\" />\n                            {this.props.balance}р\n                        </span>\n                    </div>\n                </div>\n                <div className=\"nav__actions\">\n                    <nav>\n                        <NavLink className=\"nav__item\" to=\"/clean\">\n                            Очистка\n                        </NavLink>\n                        <NavLink className={'nav__item'} to={'/survey'}>\n                            Опросы\n                        </NavLink>\n                    </nav>\n                </div>\n            </header>\n        )\n    }\n}\n\nexport default TopBar\n","import React from 'react'\nimport './money-page.scss'\n\nclass AddMoneyPage extends React.Component {\n    componentWillMount() {\n        this.timerId = window.setInterval(() => {\n            this.props.updateBalance()\n        }, 1000)\n    }\n\n    componentWillUnmount() {\n        window.clearInterval(this.timerId)\n    }\n\n    render() {\n        return (\n            <div className=\"add-money-page\">\n                <div className=\"text\">\n                    <p>Пополните баланс для очистки сообщества:</p>\n                    <div className=\"underline\" />\n                </div>\n                <form\n                    action=\"https://money.yandex.ru/quickpay/confirm.xml\"\n                    method=\"post\"\n                    target=\"_blank\"\n                >\n                    <input\n                        type=\"hidden\"\n                        name=\"receiver\"\n                        value=\"410011043655449\"\n                    />\n                    <input type=\"hidden\" name=\"quickpay-form\" value=\"shop\" />\n                    <input type=\"hidden\" name=\"targets\" value=\"Hot Dog\" />\n\n                    <div className=\"money-input-wrapper\">\n                        <p>\n                            <label htmlFor=\"money-input\">Сумма:</label>\n                        </p>\n                        <input\n                            type=\"text\"\n                            name=\"sum\"\n                            placeholder=\"100 руб\"\n                            id=\"money-input\"\n                            className=\"money-input\"\n                            autoComplete=\"false\"\n                        />\n                        <p>Комиссия — 0%</p>\n                    </div>\n                    <div className=\"payment-type-wrapper\">\n                        <p>Способ оплаты:</p>\n                        <label>\n                            <input type=\"radio\" name=\"paymentType\" value=\"PC\" />\n                            Яндекс.Деньгами\n                        </label>\n                        <label>\n                            <input type=\"radio\" name=\"paymentType\" value=\"AC\" />\n                            Банковской картой\n                        </label>\n                    </div>\n                    <input\n                        type=\"hidden\"\n                        name=\"formcomment\"\n                        value=\"hot dog: пополнение баланса\"\n                    />\n                    <input\n                        type=\"hidden\"\n                        name=\"short-dest\"\n                        value=\"hot dog: пополнение баланса\"\n                    />\n                    <input\n                        type=\"hidden\"\n                        name=\"label\"\n                        value={`hot-dog: ${window.user_id}`}\n                    />\n                    <input\n                        type=\"hidden\"\n                        name=\"successURL\"\n                        value=\"https://vk.com/app6731681_-171466987\"\n                    />\n                    <button type=\"submit\" className=\"submit-button\">\n                        Пополнить\n                    </button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default AddMoneyPage\n","import React from 'react'\nimport './FeedbackPage.css'\n\nclass FeedbackPage extends React.Component {\n    componentWillMount() {\n        /*global VK*/\n        // noinspection JSUnresolvedVariable, JSUnresolvedFunction\n        VK.Widgets.Comments('vk_comments', {\n            limit: 10,\n            attach: '*',\n            height: 800\n        })\n    }\n    render() {\n        return (\n            <div>\n                <div id=\"vk_comments\" className=\"vk-comments\" />\n            </div>\n        )\n    }\n}\n\nexport default FeedbackPage\n","import React, {Component} from 'react'\nimport './survey-form.scss'\n\nclass SurveyAddForm extends Component {\n    render() {\n        const {\n            i,\n            s_url,\n            s_right_answer,\n            onUrlChange,\n            onAnswerChange,\n            s_key\n        } = this.props\n        return (\n            <div className=\"survey-form\">\n                <div className=\"survey__instance\">\n                    <div className=\"survey__num\">Опрос №{i + 1}</div>\n                    <div className=\"survey-input\">\n                        <div className=\"input-place\">\n                            <label htmlFor=\"survey-link\">Ссылка на опрос</label>\n                            <input\n                                type=\"text\"\n                                id=\"survey-link\"\n                                value={s_url}\n                                onChange={(e) => onUrlChange(e, s_key)}\n                            />\n                        </div>\n                        <div className=\"input-place\">\n                            <label htmlFor=\"right-num\">Ответ (№)</label>\n                            <input\n                                type=\"number\"\n                                id=\"right-num\"\n                                value={s_right_answer}\n                                placeholder=\"https://vk.com/club174166508?w=poll-174166508_313436729\"\n                                onChange={(e) => onAnswerChange(e, s_key)}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default SurveyAddForm\n","import React, {Component} from 'react'\nimport SurveyAddForm from './SurveyAddForm/SurveyAddForm'\nimport connect from 'react-redux/src/connect/connect'\nimport {bindActionCreators} from 'redux'\nimport {\n    addSurveyForm,\n    GetWinners,\n    onAnswerChange,\n    onUrlChange\n} from '../../../store/reducers/reducer.survey'\nimport {history} from '../../../store'\n\nconsole.log('OPPOSITE')\n\nclass SurveyPage extends Component {\n    state = {\n        showAddForm: false\n    }\n    toggleAddForm = () => {\n        this.setState({\n            showAddForm: !this.state.showAddForm\n        })\n    }\n    render() {\n        const {\n            surveys,\n            winners,\n            loadingWinners,\n            balance,\n            onAnswerChange,\n            onUrlChange,\n            addSurveyForm,\n            GetWinners\n        } = this.props\n        const {showAddForm} = this.state\n        return (\n            <div className=\"survey-wrapper\">\n                <div className=\"survey-intro\">Создать Викторину!</div>\n                <span\n                    className={`plus-sign ${\n                        showAddForm ? 'plus-sign--cris' : ''\n                    }`}\n                    onClick={this.toggleAddForm}\n                />\n                <div className=\"surveys-form-wrapper\">\n                    {showAddForm &&\n                        Object.keys(surveys).map((s_key, i) => {\n                            const s_url = surveys[s_key].s_url\n                            const s_right_answer = surveys[s_key].s_right_answer\n\n                            return (\n                                <SurveyAddForm\n                                    key={i}\n                                    i={i}\n                                    s_url={s_url}\n                                    s_right_answer={s_right_answer}\n                                    s_key={s_key}\n                                    onAnswerChange={onAnswerChange}\n                                    onUrlChange={onUrlChange}\n                                />\n                            )\n                        })}\n                </div>\n\n                <div className=\"winners-list\">\n                    {!loadingWinners &&\n                        winners.map((winner) => {\n                            const {screen_name, first_name, last_name} = winner\n                            return (\n                                <div className=\"winners-list__item\">\n                                    {`@${screen_name}: ${first_name} ${last_name}`}\n                                </div>\n                            )\n                        })}\n                </div>\n\n                {showAddForm && (\n                    <div className=\"btns-holder\">\n                        <div className=\"btn-ff\" onClick={addSurveyForm}>\n                            Добавить опрос\n                        </div>\n                        <div\n                            className=\"btn-ff\"\n                            onClick={() => {\n                                GetWinners(surveys, balance, () => {\n                                    history.push('/add_money')\n                                })\n                            }}\n                        >\n                            Узнать победителей\n                        </div>\n                    </div>\n                )}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({surveys}) => {\n    console.log('MSP:', surveys)\n    return {\n        surveys: surveys.surveys,\n        winners: surveys.winners,\n        loadingWinners: surveys.loadingWinners\n    }\n}\n\nconst mapDispatchToProps = (dispatch) =>\n    bindActionCreators(\n        {onAnswerChange, onUrlChange, addSurveyForm, GetWinners},\n        dispatch\n    )\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(SurveyPage)\n","import React, {Component, Fragment} from 'react'\nimport {Route, Router, Switch} from 'react-router-dom'\nimport CleanPage from './components/CleanPage/CleanPage'\nimport * as Sentry from '@sentry/browser'\nimport TopBar from './components/TopBar'\nimport AddMoneyPage from './components/AddMoneyPage/AddMoneyPage'\nimport axios from 'axios'\nimport FeedbackPage from './components/FeedbackPage/FeedbackPage'\nimport {history} from '../store'\nimport SurveyPage from './components/SurveyPage/SurveyPage'\n\nif (process.env.NODE_ENV === 'production') {\n    // noinspection JSUnresolvedVariable\n    Sentry.init({\n        dsn: process.env.REACT_APP_SENTRY_DSN\n    })\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {}\n    }\n\n    setBalance(newBalance) {\n        this.setState({balance: newBalance})\n    }\n\n    async componentWillMount() {\n        window.user_id = getQueryParam('viewer_id')\n        window.auth_key = getQueryParam('auth_key')\n        history.push('/')\n        await this.updateBalance()\n    }\n\n    async getUserBalance() {\n        return (await axios.get('https://hot-dog.site/api/getBalance', {\n            params: {\n                user_vk_id: window.user_id,\n                auth_key: window.auth_key\n            }\n        })).data.balance\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({error})\n        Sentry.withScope((scope) => {\n            Object.keys(errorInfo).forEach((key) => {\n                scope.setExtra(key, errorInfo[key])\n            })\n            Sentry.captureException(error)\n        })\n    }\n\n    async updateBalance() {\n        this.setBalance(await this.getUserBalance())\n    }\n\n    render() {\n        return (\n            <Router basename={process.env.PUBLIC_URL} history={history}>\n                <Fragment>\n                    <TopBar balance={this.state.balance} />\n                    <Switch>\n                        <Route\n                            exact\n                            path=\"/\"\n                            render={() => (\n                                <CleanPage\n                                    balance={this.state.balance}\n                                    updateBalance={this.updateBalance.bind(\n                                        this\n                                    )}\n                                />\n                            )}\n                        />\n                        <Route path=\"/clean\" component={CleanPage} />\n                        <Route\n                            path=\"/survey\"\n                            component={() => (\n                                <SurveyPage balance={this.state.balance} />\n                            )}\n                        />\n                        <Route\n                            path={'/add_money'}\n                            render={() => (\n                                <AddMoneyPage\n                                    updateBalance={this.updateBalance.bind(\n                                        this\n                                    )}\n                                />\n                            )}\n                        />\n                        <Route path={'/feedback'} component={FeedbackPage} />\n                        <Route\n                            path={'/getToken'}\n                            component={() => <div>ACCESS TOKEN MAN</div>}\n                        />\n                    </Switch>\n                </Fragment>\n            </Router>\n        )\n    }\n}\n\nfunction getQueryParam(param) {\n    const query = window.location.search.substring(1)\n    window.urlParams = query\n    const vars = query.split('&')\n    for (let i = 0; i < vars.length; i++) {\n        const pair = vars[i].split('=')\n        if (pair[0] === param) {\n            return pair[1]\n        }\n    }\n    throw new Error(`Query Variable ${param} not found`)\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Provider} from 'react-redux'\nimport App from './app/App'\nimport './static/styles/index.scss'\nimport * as serviceWorker from './serviceWorker'\nimport store from './store/index'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}