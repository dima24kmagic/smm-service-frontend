{"version":3,"sources":["app/components/CleanPage/PanelControl/HeaderControl.js","app/components/CleanPage/PanelControl/PanelControl.js","app/components/CleanPage/PublicGroup/PublicInfo.js","app/components/CleanPage/PublicGroup/ProgressBar.js","app/components/CleanPage/PublicGroup/PublicAvatar.js","app/components/CleanPage/InputModal.js","services/services.api.js","store/reducers/reducer.clean.js","store/reducers/reducer.root.js","store/index.js","app/components/CleanPage/PublicGroup/Public.js","app/components/CleanPage/PublicGroup/AddPublicButton.js","app/components/CleanPage/VideoGuide.js","app/components/CleanPage/PublicGroup/GroupsModal/Group.js","app/components/CleanPage/PublicGroup/GroupsModal/GroupsModal.js","app/components/CleanPage/CleanPage.js","app/components/TopBar.js","app/components/AddMoneyPage/AddMoneyPage.js","app/components/FeedbackPage/FeedbackPage.js","app/components/SurveyPage/SurveyAddForm/SurveyAddForm.js","app/components/SurveyPage/SurveyPage.js","app/App.js","serviceWorker.js","index.js"],"names":["HeaderControl","_this$props","this","props","text","children","onClick","style","react_default","a","createElement","className","Component","PanelControl","_this","PanelControl_HeaderControl","visibility","fa","onCleanClick","PublicInfo","_Component","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","Fragment","peopleCount","onStartClean","xmlns","width","height","viewBox","fill","stroke","stroke-width","stroke-linecap","stroke-linejoin","d","cx","cy","r","x1","y1","x2","y2","deletedPeople","ProgressBar","status","concat","progress","React","PublicAvatar","src","url","alt","InputModal","call","state","setState","swal","setActionValue","_this2","target","rel","href","type","placeholder","onChange","e","changeText","VK","window","API_URL","API","getUserGroups","getGroupsPromise","getGroupsForClean","axios","get","params","user_vk_id","user_id","auth_key","getGroupDogsCount","groupID","id","deleteGroupFromCleanQue","backEndID","console","log","delete","addGroupToCleanAndGetItData","publicID","post","vk_id","startCleanTask","public_ids","getCleaningTasks","getFreshPublic","public_id","setAccessToken","token","patch","access_token","getPollById","ownerID","pollID","getPollByIdPromise","init","api","v","owner_id","poll_id","data","response","Promise","resolve","reject","filter","extended","fields","groups","normalizeVKGroupsData","items","array","map","converter","item","avatar_url","photo_100","name","GET_USER_GROUPS","Load","Loaded","Errors","ADD_GROUP_IN_CLEAN_QUE","GET_GROUPS_FOR_CLEAN","initialState","loadingUserGroups","loadingCleanTasks","errors","cleanAllGroups","cb","allGroups","dispatch","groupsIDs","g","then","res","error","getAccessTokenFromUser","showNotEnoughMoneyModal","myInterval","setInterval","cleanTasks","payload","length","showCommentAlert","clearInterval","AddGroupInCleanQue","groupData","dogsCount","dogs_count","cleanGroupByID","DeleteGroupFromCleanQue","GetGroupsForCleanAndUserGroups","startLoading","groupsForClean","loadingProperty","title","icon","button","wrapper","document","ReactDOM","render","InputModal_InputModal","el","firstChild","content","buttons","confirm","link","slice","indexOf","money","combineReducers","clean","undefined","action","objectSpread","forEach","group","inCleanQue","isLoadingInfo","cleanData","isCleaning","settedGroups","settedGroup","cleanTask","userGroups","groupsSetted","userGroup","dogs","followers","toggledGroups","_action$payload","groupWithData","_action$payload2","groupWithDogs","withCleanTask","allGroupsWithClean","history","createBrowserHistory","middleware","thunk","devToolsExtension","enhancers","push","composedEnhancers","compose","applyMiddleware","store","createStore","rootReducer","Public","PublicAvatar_PublicAvatar","ProgressBar_ProgressBar","PublicInfo_PublicInfo","connect","bindActionCreators","AddPublicButton","VideoGuide","frameBorder","allowFullScreen","Group","GroupsModal","querySelector","scrollHeight","close","GroupsModal_Group","CLEAN_TASK_ERRORS","CleanPage","publics","redirect","isAddGroupOpen","renderGroups","CleanPage_PublicGroup_Public","assign","toggleModal","setCleaningStateOnGroupByID","startCleanTasks","accessToken","timerId","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","updateCleanTasks","updateBalance","stop","getPublicIds","setCleaningStateOnPublics","setGroups","_callee3","_context3","_this3","includes","getAccessTokenFromLink","getCleanTasks","publik","refreshPublicById","addCleanTaskToGroups","publicId","freshPublic","onClean","_callee10","_context10","_this4","startCleanPublicById","freshPublicIndex","findIndex","find","CleanPage_PanelControl_PanelControl","AddPublicButton_AddPublicButton","PublicGroup_GroupsModal_GroupsModal","Redirect","to","_ref4","TopBar","NavLink","balance","AddMoneyPage","method","htmlFor","autoComplete","FeedbackPage","Widgets","Comments","limit","attach","SurveyAddForm","SurveyPage","showAddForm","toggleAddForm","SurveyPage_SurveyAddForm_SurveyAddForm","getQueryParam","param","query","location","search","substring","urlParams","vars","split","i","pair","Error","Sentry","dsn","process","REACT_APP_SENTRY_DSN","App","newBalance","errorInfo","scope","keys","setExtra","getUserBalance","setBalance","Router","basename","react","components_TopBar","Switch","Route","exact","path","components_CleanPage_CleanPage","bind","component","components_AddMoneyPage_AddMoneyPage","Boolean","hostname","match","es","app_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d5f28810.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\nclass HeaderControl extends Component {\n    render() {\n        const {text, children, onClick, style} = this.props\n        return (\n            <div\n                className=\"header-control\"\n                onClick={() => onClick()}\n                style={style}\n            >\n                <div className=\"header-control__icon\">{children}</div>\n                <span>{text}</span>\n            </div>\n        )\n    }\n}\n\nexport default HeaderControl\n","import React, {Component} from 'react'\nimport HeaderControl from './HeaderControl'\nimport {FaSync, FaTrashAlt, FaBroom} from 'react-icons/fa'\nclass PanelControl extends Component {\n    render() {\n        return (\n            <div className=\"panel-control\">\n                <HeaderControl text=\"Обновить\" style={{visibility: 'hidden'}}>\n                    <FaSync />\n                </HeaderControl>\n                <HeaderControl\n                    text=\"Очистить все\"\n                    onClick={() => this.props.onCleanClick()}\n                >\n                    <FaBroom />\n                </HeaderControl>\n                <HeaderControl text=\"Удалить\" style={{visibility: 'hidden'}}>\n                    <FaTrashAlt />\n                </HeaderControl>\n            </div>\n        )\n    }\n}\n\nexport default PanelControl\n","import React, {Component} from 'react'\nimport {FaBroom, FaUsers} from 'react-icons/fa'\nimport * as PropTypes from 'prop-types'\nimport HeaderControl from '../PanelControl/HeaderControl'\n\nexport class PublicInfo extends Component {\n    render() {\n        return <>\n            <div className=\"public__info__container public__info--all\">\n                <FaUsers/>\n                {this.props.peopleCount}\n            </div>\n            <div className=\"public__info__container\">\n                <HeaderControl\n                    text=\"Очистить\"\n                    onClick={() => this.props.onStartClean()}\n                >\n                    <FaBroom />\n                </HeaderControl>\n            </div>\n            <div className=\"public__info__container public__info--deleted\">\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\"\n                     stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\"\n                     className=\"feather feather-user-x\">\n                    <path d=\"M16 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2\"></path>\n                    <circle cx=\"8.5\" cy=\"7\" r=\"4\"></circle>\n                    <line x1=\"18\" y1=\"8\" x2=\"23\" y2=\"13\"></line>\n                    <line x1=\"23\" y1=\"8\" x2=\"18\" y2=\"13\"></line>\n                </svg>\n                {this.props.deletedPeople}\n            </div>\n        </>\n    }\n}\n\nPublicInfo.propTypes = {\n    peopleCount: PropTypes.any,\n    deletedPeople: PropTypes.any\n}","import React from 'react'\nimport './ProgressBar.css'\n\nclass ProgressBar extends React.Component {\n    render() {\n        return (\n            <div className=\"progress-position\">\n                <span className={'progress-status'}>{this.props.status}</span>\n                <div className=\"progress\">\n                    <div\n                        className=\"progress-bar main-progress-bar\"\n                        style={{width: `${this.props.progress}%`}}\n                    >\n                        <span className=\"percent\">{this.props.progress}%</span>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport {ProgressBar}\n","import React, {Component} from 'react'\n\nexport class PublicAvatar extends Component {\n    render() {\n        return <img\n            className=\"public__heading__img\"\n            src={this.props.url}\n            alt=\"pub img\"\n        />\n    }\n}","import React from 'react'\nimport swal from 'sweetalert'\nimport './InputModal.css'\n\nconst OAUTH_LINK =\n    'https://oauth.vk.com/authorize?client_id=6726221&redirect_uri=https://oauth.vk.com/blank.html&display=page&response_type=token&v=5.85&scope=groups,offline'\nconst PLACEHOLDER_ACCESS_TOKEN = 'https://oauth.vk.com/blank.html#access_token=1383bc6d5df7bf74655b531297c71617b2345687ca&expires_in=0&user_id=159204098'\n\nclass InputModal extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {text: ''}\n    }\n\n    changeText(text) {\n        this.setState({text: text})\n        swal.setActionValue(text)\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"modal__text\">\n                    <p>Нет доступа к управлению вашими сообществами</p>\n                    <p>\n                        Для решения этой проблемы перейдите, по{' '}\n                        <a target=\"_blank\" rel=\"noopener noreferrer\" href={OAUTH_LINK}>этой ссылке</a>.\n                    </p>\n                    <p>Разрешите доступ нашему приложению</p>\n                    <p>\n                        ВКонтакте покажет страницу, сообщающую, что не стоит\n                        передавать данные из адресной строки\n                    </p>\n                    <p>\n                        Однако, это абсолютно безопасно в случае с нашим\n                        приложением\n                    </p>\n                    <p>Скопируйте целиком URL и вставьте в поле ниже:</p>\n                    <input\n                        type=\"text\"\n                        placeholder={PLACEHOLDER_ACCESS_TOKEN}\n                        value={this.state.text}\n                        onChange={(e) => {\n                            this.changeText(e.target.value)\n                        }}\n                    />\n                    <p>\n                        Это необходимо для получения доступа к удалению\n                        заблокированных пользователей\n                    </p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport {InputModal}\n","import axios from 'axios'\nimport ReactDOM from 'react-dom'\nimport {InputModal} from '../app/components/CleanPage/InputModal'\nimport swal from 'sweetalert'\nimport React from 'react'\n\nconst VK = window.VK\n\nconst API_URL = 'https://hot-dog.site/api'\nconst VK_API_URL = 'https://api.vk.com/method'\nexport const API = {\n    getUserGroups: () => getGroupsPromise,\n    getGroupsForClean: () =>\n        axios.get(API_URL + '/getPublics', {\n            params: {\n                user_vk_id: window.user_id,\n                auth_key: window.auth_key\n            }\n        }),\n    getGroupDogsCount: (groupID) =>\n        axios.get(API_URL + '/getDogsCount', {\n            params: {\n                id: groupID,\n                user_vk_id: window.user_id,\n                auth_key: window.auth_key\n            }\n        }),\n    deleteGroupFromCleanQue: (backEndID) => {\n        console.log('DELETE REQUEST, id is:', backEndID)\n        return axios.delete(API_URL + '/deletePublic', {\n            id: backEndID,\n            user_vk_id: window.user_id,\n            auth_key: window.auth_key\n        })\n    },\n    addGroupToCleanAndGetItData: (publicID) =>\n        axios.post(API_URL + '/addPublic', {\n            user_vk_id: window.user_id,\n            auth_key: window.auth_key,\n            vk_id: publicID\n        }),\n    startCleanTask: (public_ids) =>\n        axios.post('https://hot-dog.site/api/startCleanTasks', {\n            user_vk_id: window.user_id,\n            auth_key: window.auth_key,\n            public_ids: public_ids\n        }),\n    getCleaningTasks: () =>\n        axios.get('https://hot-dog.site/api/getCleanTasks', {\n            params: {\n                user_vk_id: window.user_id,\n                auth_key: window.auth_key\n            }\n        }),\n    getFreshPublic: (public_id) =>\n        axios.get('https://hot-dog.site/api/refreshPublic', {\n            params: {\n                user_vk_id: window.user_id,\n                auth_key: window.auth_key,\n                id: public_id\n            }\n        }),\n    setAccessToken: (token) =>\n        axios.patch('https://hot-dog.site/api/setAccessToken', {\n            access_token: token,\n            user_vk_id: window.user_id,\n            auth_key: window.auth_key\n        }),\n    getPollById: (ownerID, pollID) => getPollByIdPromise(ownerID, pollID)\n}\n\nconst getPollByIdPromise = (ownerID, pollID) => {\n    VK.init(() => {\n        VK.api(\n            'polls.getById',\n            {\n                v: '5.85',\n                owner_id: ownerID,\n                poll_id: pollID\n            },\n            (data) => {\n                console.log('POLL DATA', data, data.response)\n            }\n        )\n    })\n}\n\nconst getGroupsPromise = new Promise((resolve, reject) => {\n    VK.init(\n        () => {\n            VK.api(\n                'groups.get',\n                {\n                    filter: 'moder',\n                    extended: '1',\n                    fields: 'photo_100',\n                    v: '5.85'\n                },\n                (data) => {\n                    const groups = normalizeVKGroupsData(data.response.items)\n                    // const groupsCount = data.response.count\n                    // console.log(`Got ${groupsCount} publics from VK:`)\n                    // console.log(groups)\n                    resolve(groups)\n                }\n            )\n        },\n        () => {\n            console.log('VK API initialization failed')\n            reject('Groups fetch failed')\n        },\n        '5.85'\n    )\n})\n\nconst normalizeVKGroupsData = (array) => {\n    return array.map(converter)\n}\n\nconst converter = (item) => {\n    // noinspection JSUnresolvedVariable\n    return {\n        avatar_url: item.photo_100,\n        id: item.id,\n        name: item.name\n    }\n}\n\nconst authHeaderDogsAPI = () => {\n    return {\n        params: {\n            user_vk_id: window.user_id,\n            auth_key: window.auth_key\n        }\n    }\n}\n","import {API} from '../../services/services.api'\nimport swal from 'sweetalert'\nimport axios from 'axios'\nimport ReactDOM from 'react-dom'\nimport {InputModal} from '../../app/components/CleanPage/InputModal'\nimport React from 'react'\n\nexport const GET_USER_GROUPS = {\n    Load: 'groups/USER_GROUPS_LOAD',\n    Loaded: 'groups/USER_GROUPS_LOADED',\n    Errors: 'groups/USER_GROUPS_ERRORS'\n}\nexport const ADD_GROUP_IN_CLEAN_QUE = {\n    click: 'ADD_GROUP_IN_CLEAN_QUE_CLICK',\n    added: 'ADD_GROUP_IN_CLEAN_QUE_ADD_TO_SERVER'\n}\nexport const GET_DOGS_COUNT = 'GET_DOGS_COUNT '\nexport const DELETE_GROUP_FROM_CLEAN_QUE = 'DELETE_GROUP_FROM_CLEAN_QUE'\nexport const GET_GROUPS_FOR_CLEAN = {\n    Load: 'groups/GET_GROUPS_FOR_CLEAN_LOAD',\n    Loaded: 'groups/GET_GROUPS_FOR_CLEAN_LOADED',\n    Errors: 'groups/GET_GROUPS_FOR_CLEAN_ERRORS'\n}\nexport const CLEAN_GROUP_BY_ID = 'CLEAN_GROUP_BY_ID'\nexport const UPDATE_CLEANING_STATE = 'UPDATE_CLEANING_STATE'\nexport const CLEAN_ALL_GROUPS = 'CLEAN_ALL_GROUPS'\n\nconst initialState = {\n    groups: {\n        data: [],\n        loadingUserGroups: true,\n        loadingCleanTasks: true,\n        errors: []\n    }\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case GET_GROUPS_FOR_CLEAN.Load: {\n            return {\n                ...state,\n                groups: {\n                    ...state.groups,\n                    loadingCleanTasks: true\n                }\n            }\n        }\n        case GET_GROUPS_FOR_CLEAN.Loaded: {\n            const groupsForClean = action.payload\n            groupsForClean.forEach((group) => {\n                group.inCleanQue = true\n                group.isLoadingInfo = false\n                group.cleanData = {\n                    isCleaning: false\n                }\n            })\n            return {\n                ...state,\n                groups: {\n                    ...state.groups,\n                    data: groupsForClean,\n                    loadingCleanTasks: false\n                }\n            }\n        }\n        case UPDATE_CLEANING_STATE: {\n            const cleanTasks = action.payload\n            if (cleanTasks.length === 0) {\n                return state\n            } else {\n                let settedGroups = state.groups.data.map((g) => g)\n                settedGroups.forEach((settedGroup) => {\n                    cleanTasks.forEach((cleanTask) => {\n                        if (settedGroup.backEndID === cleanTask.public_id) {\n                            if (cleanTask.status === 'Завершили') {\n                                settedGroup.cleanData = {\n                                    isCleaning: false\n                                }\n                            } else {\n                                settedGroup.cleanData = {\n                                    isCleaning: true,\n                                    progress: cleanTask.progress,\n                                    status: cleanTask.status\n                                }\n                            }\n                        }\n                    })\n                })\n                return {\n                    ...state,\n                    groups: {\n                        ...state.groups,\n                        data: settedGroups\n                    }\n                }\n            }\n        }\n        case GET_USER_GROUPS.Load: {\n            return {\n                ...state,\n                groups: {\n                    ...state.groups,\n                    loadingUserGroups: true\n                }\n            }\n        }\n        case GET_USER_GROUPS.Loaded: {\n            const userGroups = action.payload\n            const groupsSetted = state.groups.data\n            userGroups.forEach((group) => {\n                group.inCleanQue = false\n                group.isLoadingInfo = true\n            })\n            userGroups.forEach((userGroup) => {\n                groupsSetted.forEach((settedGroup) => {\n                    if (userGroup.id === settedGroup.vk_id) {\n                        userGroup.inCleanQue = settedGroup.inCleanQue\n                        userGroup.backEndID = settedGroup.id\n                        userGroup.dogs = settedGroup.dogs\n                        userGroup.followers = settedGroup.followers\n                        userGroup.cleanData = settedGroup.cleanData\n                    }\n                })\n            })\n            return {\n                ...state,\n                groups: {\n                    data: userGroups,\n                    loadingUserGroups: false\n                }\n            }\n        }\n        case ADD_GROUP_IN_CLEAN_QUE.click:\n            const groupID = action.payload\n            let toggledGroups = state.groups.data.map((group) => {\n                if (group.id === groupID) {\n                    return {\n                        ...group,\n                        inCleanQue: true,\n                        cleanData: {\n                            isCleaning: false\n                        }\n                    }\n                } else {\n                    return group\n                }\n            })\n            return {\n                ...state,\n                groups: {\n                    ...state.groups,\n                    data: toggledGroups\n                }\n            }\n        case ADD_GROUP_IN_CLEAN_QUE.added: {\n            const {groupData, groupID} = action.payload\n            let groupWithData = state.groups.data.map((group) => {\n                if (group.id === groupID) {\n                    return {\n                        ...group,\n                        ...groupData,\n                        dogs: 'Анализ...',\n                        backEndID: groupData.id\n                    }\n                } else {\n                    return group\n                }\n            })\n            return {\n                ...state,\n                groups: {\n                    ...state.groups,\n                    data: groupWithData\n                }\n            }\n        }\n        case GET_DOGS_COUNT: {\n            const {dogsCount, groupID} = action.payload\n            let groupWithDogs = state.groups.data.map((group) => {\n                if (group.vk_id === groupID) {\n                    return {\n                        ...group,\n                        dogs: dogsCount\n                    }\n                } else {\n                    return group\n                }\n            })\n            return {\n                ...state,\n                groups: {\n                    ...state.groups,\n                    data: groupWithDogs\n                }\n            }\n        }\n        case DELETE_GROUP_FROM_CLEAN_QUE: {\n            const groupID = action.payload\n            let toggledGroups = state.groups.data.map((group) => {\n                if (group.id === groupID) {\n                    return {...group, inCleanQue: false}\n                } else {\n                    return group\n                }\n            })\n            return {...state, groups: {...state.groups, data: toggledGroups}}\n        }\n        case CLEAN_GROUP_BY_ID: {\n            let groupID = action.payload\n            let withCleanTask = state.groups.data.map((group) => {\n                if (group.backEndID === groupID) {\n                    return {\n                        ...group,\n                        cleanData: {\n                            isCleaning: true,\n                            progress: 0,\n                            status: 'Отправляем запрос'\n                        }\n                    }\n                } else {\n                    return group\n                }\n            })\n            return {\n                ...state,\n                groups: {\n                    ...state.groups,\n                    data: withCleanTask\n                }\n            }\n        }\n        case CLEAN_ALL_GROUPS: {\n            const allGroupsWithClean = state.groups.data.map((group) => {\n                API.startCleanTask([group.backEndID])\n                return {\n                    ...group,\n                    cleanData: {\n                        isCleaning: true,\n                        progress: 0,\n                        status: 'Отправляем запрос'\n                    }\n                }\n            })\n            return {\n                ...state,\n                groups: {\n                    ...state.groups,\n                    data: allGroupsWithClean\n                }\n            }\n        }\n        default:\n            return state\n    }\n}\n\nexport const cleanAllGroups = (cb, allGroups) => {\n    return (dispatch) => {\n        const groupsIDs = allGroups.map((g) => {\n            return g.backEndID\n        })\n        API.startCleanTask(groupsIDs).then((res) => {\n            switch (res.data.error.id) {\n                case 1:\n                    getAccessTokenFromUser()\n                    break\n                case 2:\n                    showNotEnoughMoneyModal(res.error.value)\n                    break\n                default:\n                    dispatch({\n                        type: CLEAN_ALL_GROUPS\n                    })\n                    let myInterval = setInterval(() => {\n                        API.getCleaningTasks().then((r) => {\n                            const cleanTasks = r.data\n                            dispatch({\n                                type: UPDATE_CLEANING_STATE,\n                                payload: cleanTasks\n                            })\n                            if (cleanTasks.length === 0) {\n                                showCommentAlert(cb)\n                                clearInterval(myInterval)\n                            }\n                        })\n                    }, 500)\n            }\n        })\n    }\n}\n\nexport const AddGroupInCleanQue = (groupID) => {\n    return (dispatch) => {\n        dispatch({\n            type: ADD_GROUP_IN_CLEAN_QUE.click,\n            payload: groupID\n        })\n        API.addGroupToCleanAndGetItData(groupID).then((r) => {\n            const groupData = r.data\n            dispatch({\n                type: ADD_GROUP_IN_CLEAN_QUE.added,\n                payload: {groupData, groupID}\n            })\n            API.getGroupDogsCount(groupData.id).then((r) => {\n                const dogsCount = r.data.dogs_count\n                dispatch({\n                    type: GET_DOGS_COUNT,\n                    payload: {dogsCount, groupID}\n                })\n            })\n        })\n    }\n}\n\nexport const cleanGroupByID = (groupID, cb) => {\n    return (dispatch) => {\n        API.startCleanTask([groupID]).then((res) => {\n            if (res.data.error) {\n                switch (res.data.error.id) {\n                    case 1:\n                        getAccessTokenFromUser()\n                        break\n                    case 2:\n                        showNotEnoughMoneyModal(res.error.value)\n                        break\n                    default:\n                }\n            } else {\n                dispatch({\n                    type: CLEAN_GROUP_BY_ID,\n                    payload: groupID\n                })\n                let myInterval = setInterval(() => {\n                    API.getCleaningTasks().then((r) => {\n                        const cleanTasks = r.data\n                        dispatch({\n                            type: UPDATE_CLEANING_STATE,\n                            payload: cleanTasks\n                        })\n                        if (cleanTasks.length === 0) {\n                            showCommentAlert(cb)\n                            clearInterval(myInterval)\n                        }\n                    })\n                }, 500)\n            }\n        })\n    }\n}\n\nexport const DeleteGroupFromCleanQue = (groupID, backEndID) => {\n    return (dispatch) => {\n        dispatch({\n            type: DELETE_GROUP_FROM_CLEAN_QUE,\n            payload: groupID\n        })\n        API.deleteGroupFromCleanQue(backEndID).then((r) => {})\n    }\n}\n\nexport const GetGroupsForCleanAndUserGroups = () => {\n    return (dispatch) => {\n        startLoading(GET_GROUPS_FOR_CLEAN, dispatch)\n        API.getGroupsForClean().then((r) => {\n            const groupsForClean = r.data\n            dispatch({\n                type: GET_GROUPS_FOR_CLEAN.Loaded,\n                payload: groupsForClean\n            })\n            let myInterval = setInterval(() => {\n                API.getCleaningTasks().then((r) => {\n                    const cleanTasks = r.data\n                    dispatch({\n                        type: UPDATE_CLEANING_STATE,\n                        payload: cleanTasks\n                    })\n                    if (cleanTasks.length === 0) {\n                        clearInterval(myInterval)\n                    }\n                })\n            }, 500)\n            startLoading(GET_USER_GROUPS, dispatch)\n            const groups = API.getUserGroups()\n            groups.then((res) => {\n                dispatch({type: GET_USER_GROUPS.Loaded, payload: res})\n            })\n        })\n    }\n}\n\nconst startLoading = (loadingProperty, dispatch) => {\n    dispatch({\n        type: loadingProperty.Load\n    })\n}\n\nfunction showCommentAlert(cb) {\n    console.log('Comment alert')\n    const response = swal({\n        title: 'Спасибо!',\n        icon: 'success',\n        text: 'Оставьте, пожалуйста, отзыв о сервисе :)',\n        button: 'Хорошо'\n    })\n    response.then((r) => {\n        console.log('R IS:', r)\n        if (r === true) {\n            if (cb) {\n                cb()\n            }\n        }\n    })\n}\n\nfunction getAccessTokenFromUser() {\n    let wrapper = window.document.createElement('div')\n    ReactDOM.render(<InputModal />, wrapper)\n    let el = wrapper.firstChild\n    const response = swal({\n        title: 'Упс. Мы не можем очистить ваши сообщества',\n        content: el,\n        buttons: {\n            confirm: {\n                text: 'Сохранить и запустить!',\n                value: ''\n            }\n        }\n    })\n    response.then((r) => {\n        const token = getAccessTokenFromLink(r)\n        API.setAccessToken(token)\n    })\n}\nfunction showNotEnoughMoneyModal(money) {\n    const response = swal({\n        title: 'Упс.. Недостаточно денег',\n        icon: 'error',\n        text: `Для очистки сообществ нужно еще ${money}р.\\nПополните, пожалуйста, баланс`,\n        button: {text: 'Пополнить'}\n    })\n    response.then((r) => {\n        if (r === true) {\n            // history.push('/add_money')\n            console.log('GO TO ADD MONEY')\n        }\n    })\n}\n\nfunction getAccessTokenFromLink(link) {\n    const searchStartStr = '#access_token='\n    const searchEndStr = '&expires_in='\n    return link.slice(\n        link.indexOf(searchStartStr) + searchStartStr.length,\n        link.indexOf(searchEndStr)\n    )\n}","import {combineReducers} from 'redux'\nimport clean from './reducer.clean'\n\nexport default combineReducers({\n    clean\n})\n","import {createStore, applyMiddleware, compose} from 'redux'\nimport logger from 'redux-logger'\nimport thunk from 'redux-thunk'\nimport {createBrowserHistory} from 'history'\nimport rootReducer from './reducers/reducer.root'\n\nexport const history = createBrowserHistory()\n\nconst middleware = [thunk]\nconst devToolsExtension = window.devToolsExtension\nconst enhancers = []\n\nif (typeof devToolsExtension === 'function') {\n    enhancers.push(devToolsExtension())\n}\n\nconst composedEnhancers = compose(\n    applyMiddleware(...middleware),\n    ...enhancers\n)\n\nconst initialState = {}\n\nconst store = createStore(rootReducer, initialState, composedEnhancers)\n\nexport default store\n","import React, {Component} from 'react'\nimport {PublicInfo} from './PublicInfo'\nimport {ProgressBar} from './ProgressBar'\nimport {PublicAvatar} from './PublicAvatar'\nimport './Public.css'\nimport PropTypes from 'prop-types'\nimport {bindActionCreators} from 'redux'\nimport {connect} from 'react-redux'\nimport {cleanGroupByID} from '../../../../store/reducers/reducer.clean'\nimport {history} from '../../../../store'\n\nclass Public extends Component {\n    static propTypes = {\n        id: PropTypes.number.isRequired,\n        vk_id: PropTypes.number.isRequired,\n        name: PropTypes.string.isRequired,\n        avatar_url: PropTypes.string.isRequired,\n        followers: PropTypes.number.isRequired,\n        dogs: PropTypes.oneOf(PropTypes.number, PropTypes.string).isRequired,\n        cleanData: PropTypes.shape({\n            isCleaning: PropTypes.bool.isRequired,\n            progress: PropTypes.number,\n            status: PropTypes.string\n        }).isRequired,\n        onClean: PropTypes.func.isRequired\n    }\n\n    render() {\n        const {backEndID, cleanGroupByID} = this.props;\n        return (\n            <div className=\"public-wrapper\">\n                <div className=\"public\">\n                    <div className=\"public__heading\">\n                        <PublicAvatar url={this.props.avatar_url} />\n                        <div className=\"public__heading__name\">\n                            {this.props.name}\n                        </div>\n                    </div>\n                    <div className=\"public__info\">\n                        {this.props.cleanData.isCleaning ? (\n                            <ProgressBar\n                                progress={this.props.cleanData.progress}\n                                status={this.props.cleanData.status}\n                            />\n                        ) : (\n                            <PublicInfo\n                                peopleCount={this.props.followers}\n                                deletedPeople={this.props.dogs}\n                                onStartClean={() => {\n                                    cleanGroupByID(backEndID, () => {history.push(\"/feedback\")})\n                                }}\n                            />\n                        )}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\n\nconst mapDispatchToProps = dispatch => bindActionCreators({cleanGroupByID}, dispatch)\n\nexport default connect(null, mapDispatchToProps)(Public);\n","import React, {Component} from 'react'\nimport * as PropTypes from 'prop-types'\n\nexport class AddPublicButton extends Component {\n    render() {\n        return <div\n            className=\"btn btn__add\"\n            onClick={this.props.onClick}\n        >\n            Добавить Сообщество\n        </div>\n    }\n}\n\nAddPublicButton.propTypes = {onClick: PropTypes.func}","import React from 'react'\n\nexport function VideoGuide() {\n    return (\n        <iframe\n            title={\"video guide\"}\n            src=\"//vk.com/video_ext.php?oid=-171466987&id=456239020&hash=2a4b21d6648495d0&hd=1\"\n            width=\"426\"\n            height=\"210\"\n            frameBorder=\"0\"\n            allowFullScreen\n        />\n    )\n}","import React, {Component} from 'react'\nimport {bindActionCreators} from 'redux'\nimport {connect} from 'react-redux'\nimport {\n    AddGroupInCleanQue,\n    DeleteGroupFromCleanQue\n} from '../../../../../store/reducers/reducer.clean'\n\nclass Group extends Component {\n    render() {\n        const {group, AddGroupInCleanQue, DeleteGroupFromCleanQue} = this.props\n        return (\n            <div className=\"group\">\n                <div className=\"group__details\">\n                    <img src={group.avatar_url} alt=\"avatar\" />\n                    <span className=\"ellipsis\">{group.name}</span>\n                </div>\n                <span\n                    className={`plus-sign ${\n                        group.inCleanQue ? 'plus-sign--cris' : ''\n                    }`}\n                    onClick={() => {\n                        if (group.inCleanQue) {\n                            console.log('Group for deleting', group)\n                            DeleteGroupFromCleanQue(group.id, group.backEndID)\n                        } else {\n                            AddGroupInCleanQue(group.id)\n                        }\n                    }}\n                />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({})\n\nconst mapDispatchToProps = (dispatch) =>\n    bindActionCreators(\n        {\n            AddGroupInCleanQue,\n            DeleteGroupFromCleanQue\n        },\n        dispatch\n    )\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Group)\n","import React, {Component} from 'react'\nimport './modal.scss'\nimport Group from './Group'\n\nclass GroupsModal extends Component {\n    componentDidMount() {\n        const html = document.querySelector(\"html\");\n        const height = html.scrollHeight;\n        document.querySelector('.modal__bg').style.height = `${height}px`\n    }\n\n    render() {\n        const {groups, close} = this.props\n        return (\n            <div className=\"modal\">\n                <div className=\"modal__bg\" onClick={close} />\n                <div className=\"modal__body\">\n                    <div className=\"modal__body__text\">Выберите сообщество</div>\n                    <div className=\"modal__body__content\">\n                        {groups.map((group) => {\n                            return <Group group={group} />\n                        })}\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default GroupsModal\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport PanelControl from './PanelControl/PanelControl'\nimport Public from './PublicGroup/Public'\nimport {bindActionCreators} from 'redux'\nimport {AddPublicButton} from './PublicGroup/AddPublicButton'\nimport swal from 'sweetalert'\nimport axios from 'axios'\nimport {\n    GetGroupsForCleanAndUserGroups,\n    cleanGroupByID,\n    cleanAllGroups\n} from '../../../store/reducers/reducer.clean'\nimport ReactDOM from 'react-dom'\nimport {InputModal} from './InputModal'\nimport {VideoGuide} from './VideoGuide'\nimport {Redirect} from 'react-router-dom'\nimport GroupsModal from './PublicGroup/GroupsModal/GroupsModal'\nimport {history} from '../../../store'\n\nconst CLEAN_TASK_ERRORS = ['Возникла ошибка', 'Завершили'] // errors? finished != error\n\nclass CleanPage extends Component {\n    state = {\n        publics: [],\n        redirect: false,\n        isAddGroupOpen: false\n    }\n\n    componentWillMount() {\n        const {GetGroupsForCleanAndUserGroups} = this.props\n        GetGroupsForCleanAndUserGroups()\n    }\n\n    renderGroups = (groups) => {\n        if (!groups.length) return null\n        return groups.map(\n            (group) => group.inCleanQue && <Public {...group} key={group.id} />\n        )\n    }\n\n    async startCleanPublicById(publicID) {\n        const {setCleaningStateOnGroupByID} = this.props\n        const response = await this.startCleanTasks([publicID])\n        if ('error' in response) {\n            if (response.error.id === 1) {\n                const accessToken = await this.getAccessTokenFromUser()\n                await this.setAccessToken(accessToken)\n                return await this.onStartClean()\n            } else if (response.error.id === 2) {\n                await this.showNotEnoughMoneyModal(response.error.value)\n            }\n        } else {\n            setCleaningStateOnGroupByID(publicID)\n            // this.setGroups(publics)\n            this.timerId = setInterval(async () => {\n                await this.updateCleanTasks()\n                console.log(this)\n                await this.props.updateBalance()\n            }, 1500)\n        }\n    }\n\n    async onStartClean() {\n        const public_ids = this.getPublicIds()\n        const response = await this.startCleanTasks(public_ids)\n        if ('error' in response) {\n            if (response.error.id === 1) {\n                const accessToken = await this.getAccessTokenFromUser()\n                await this.setAccessToken(accessToken)\n                return await this.onStartClean()\n            } else if (response.error.id === 2) {\n                await this.showNotEnoughMoneyModal(response.error.value)\n            }\n        } else {\n            const publics = this.setCleaningStateOnPublics()\n            this.setGroups(publics)\n            this.timerId = setInterval(async () => {\n                await this.updateCleanTasks()\n                await this.props.updateBalance()\n            }, 1500)\n        }\n    }\n\n    async startCleanTasks(public_ids) {\n        return (await axios.post('https://hot-dog.site/api/startCleanTasks', {\n            user_vk_id: window.user_id,\n            auth_key: window.auth_key,\n            public_ids: public_ids\n        })).data\n    }\n\n    cleanTaskIsFinished(cleanTask) {\n        return CLEAN_TASK_ERRORS.includes(cleanTask.status)\n    }\n\n    getPublicIds() {\n        return this.state.publics.map((item) => item.id)\n    }\n\n    async getAccessTokenFromUser() {\n        let wrapper = window.document.createElement('div')\n        ReactDOM.render(<InputModal />, wrapper)\n        let el = wrapper.firstChild\n        const response = await swal({\n            title: 'Упс. Мы не можем очистить ваши сообщества',\n            content: el,\n            buttons: {\n                confirm: {\n                    text: 'Сохранить и запустить!',\n                    value: ''\n                }\n            }\n        })\n        return this.getAccessTokenFromLink(response)\n    }\n\n    async setAccessToken(token) {\n        return await axios.patch('https://hot-dog.site/api/setAccessToken', {\n            access_token: token,\n            user_vk_id: window.user_id,\n            auth_key: window.auth_key\n        })\n    }\n\n    async getCleanTasks() {\n        return (await axios.get('https://hot-dog.site/api/getCleanTasks', {\n            params: {\n                user_vk_id: window.user_id,\n                auth_key: window.auth_key\n            }\n        })).data\n    }\n\n    async updateCleanTasks() {\n        const cleanTasks = await this.getCleanTasks()\n        if (!(cleanTasks && cleanTasks.length)) {\n            clearInterval(this.timerId)\n            for (const publik of this.state.publics) {\n                await this.refreshPublicById(publik.id)\n            }\n            await this.showCommentAlert()\n            return\n        }\n        const publics = this.addCleanTaskToGroups(\n            this.state.publics,\n            cleanTasks\n        )\n        this.setGroups(publics)\n    }\n\n    async refreshPublicById(publicId) {\n        const freshPublic = await this.getFreshPublic(publicId)\n        freshPublic.cleanData = {\n            isCleaning: false\n        }\n        freshPublic.onClean = async () => {\n            await this.startCleanPublicById(freshPublic.id)\n        }\n        const {publics} = this.state\n        const freshPublicIndex = publics.findIndex(\n            (item) => item.id === publicId\n        )\n        publics[freshPublicIndex] = freshPublic\n        this.setGroups(publics)\n    }\n\n    async getFreshPublic(public_id) {\n        return (await axios.get('https://hot-dog.site/api/refreshPublic', {\n            params: {\n                user_vk_id: window.user_id,\n                auth_key: window.auth_key,\n                id: public_id\n            }\n        })).data\n    }\n\n    getAccessTokenFromLink(link) {\n        const searchStartStr = '#access_token='\n        const searchEndStr = '&expires_in='\n        return link.slice(\n            link.indexOf(searchStartStr) + searchStartStr.length,\n            link.indexOf(searchEndStr)\n        )\n    }\n\n    getPublicById(publics, public_id) {\n        return publics.find((item) => item.id === public_id)\n    }\n\n    async showNotEnoughMoneyModal(money) {\n        const response = await swal({\n            title: 'Упс.. Недостаточно денег',\n            icon: 'error',\n            text: `Для очистки сообществ нужно еще ${money}р.\\nПополните, пожалуйста, баланс`,\n            button: {text: 'Пополнить'}\n        })\n        if (response) this.setState({redirect: '/add_money'})\n    }\n\n    async showCommentAlert() {\n        const response = await swal({\n            title: 'Спасибо!',\n            icon: 'success',\n            text: 'Оставьте, пожалуйста, отзыв о сервисе :)',\n            button: 'Хорошо'\n        })\n        if (response) this.setState({redirect: '/feedback'})\n    }\n\n    toggleModal = () => {\n        this.setState({\n            isAddGroupOpen: !this.state.isAddGroupOpen\n        })\n    }\n\n    render() {\n        const {isAddGroupOpen} = this.state\n        const {groups, cleanAllGroups} = this.props\n\n        return (\n            <div className=\"clean\">\n                <PanelControl\n                    onCleanClick={() =>\n                        cleanAllGroups(() => {\n                            history.push('/feedback')\n                        }, groups)\n                    }\n                />\n\n                <div className=\"publics\">\n                    {groups && this.renderGroups(groups)}\n                </div>\n\n                <AddPublicButton onClick={this.toggleModal} />\n\n                {isAddGroupOpen && (\n                    <GroupsModal close={this.toggleModal} groups={groups} />\n                )}\n\n                <VideoGuide />\n\n                {this.state.redirect && (\n                    <Redirect to={this.state.redirect} push />\n                )}\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = ({clean}) => ({\n    groups: clean.groups.data,\n    cleanTasks: clean.cleanTasks\n})\n\nconst mapDispatchToProps = (dispatch) =>\n    bindActionCreators(\n        {\n            GetGroupsForCleanAndUserGroups,\n            setCleaningStateOnGroupByID: cleanGroupByID,\n            cleanAllGroups\n        },\n        dispatch\n    )\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(CleanPage)\n","import React, {Component} from 'react'\nimport {NavLink} from 'react-router-dom'\nimport '../fonts/fontello/fontello.css'\n\nclass TopBar extends Component {\n    render() {\n        return (\n            <header className=\"nav\">\n                <div className=\"nav__info\">\n                    <nav>\n                        <NavLink className={'nav__item'} to={'/feedback'}>\n                            Отзывы\n                        </NavLink>\n                        <NavLink className={'nav__item'} to={'/add_money'}>\n                            Пополнить баланс\n                        </NavLink>\n                    </nav>\n                    <div>\n                        <span className=\"balance\">\n                            <i className=\"icon-rouble\" />\n                            {this.props.balance}р\n                        </span>\n                    </div>\n                </div>\n                <div className=\"nav__actions\">\n                    <nav>\n                        <NavLink className=\"nav__item\" to=\"/clean\">\n                            Очистка\n                        </NavLink>\n                        <NavLink className={'nav__item'} to={'/survey'}>\n                            Опросы\n                        </NavLink>\n                    </nav>\n                </div>\n            </header>\n        )\n    }\n}\n\nexport default TopBar\n","import React from 'react'\nimport './money-page.scss'\n\nclass AddMoneyPage extends React.Component {\n    componentWillMount() {\n        this.timerId = window.setInterval(() => {\n            this.props.updateBalance()\n        }, 1000)\n    }\n\n    componentWillUnmount() {\n        window.clearInterval(this.timerId)\n    }\n\n    render() {\n        return (\n            <div className=\"add-money-page\">\n                <div className=\"text\">\n                    <p>Пополните баланс для очистки сообщества:</p>\n                    <div className=\"underline\" />\n                </div>\n                <form\n                    action=\"https://money.yandex.ru/quickpay/confirm.xml\"\n                    method=\"post\"\n                    target=\"_blank\"\n                >\n                    <input\n                        type=\"hidden\"\n                        name=\"receiver\"\n                        value=\"410011043655449\"\n                    />\n                    <input type=\"hidden\" name=\"quickpay-form\" value=\"shop\" />\n                    <input type=\"hidden\" name=\"targets\" value=\"Hot Dog\" />\n\n                    <div className=\"money-input-wrapper\">\n                        <p>\n                            <label htmlFor=\"money-input\">Сумма:</label>\n                        </p>\n                        <input\n                            type=\"text\"\n                            name=\"sum\"\n                            placeholder=\"100 руб\"\n                            id=\"money-input\"\n                            className=\"money-input\"\n                            autoComplete=\"false\"\n                        />\n                        <p>Комиссия — 0%</p>\n                    </div>\n                    <div className=\"payment-type-wrapper\">\n                        <p>Способ оплаты:</p>\n                        <label>\n                            <input type=\"radio\" name=\"paymentType\" value=\"PC\" />\n                            Яндекс.Деньгами\n                        </label>\n                        <label>\n                            <input type=\"radio\" name=\"paymentType\" value=\"AC\" />\n                            Банковской картой\n                        </label>\n                    </div>\n                    <input\n                        type=\"hidden\"\n                        name=\"formcomment\"\n                        value=\"hot dog: пополнение баланса\"\n                    />\n                    <input\n                        type=\"hidden\"\n                        name=\"short-dest\"\n                        value=\"hot dog: пополнение баланса\"\n                    />\n                    <input\n                        type=\"hidden\"\n                        name=\"label\"\n                        value={`hot-dog: ${window.user_id}`}\n                    />\n                    <input\n                        type=\"hidden\"\n                        name=\"successURL\"\n                        value=\"https://vk.com/app6731681_-171466987\"\n                    />\n                    <button type=\"submit\" className=\"submit-button\">\n                        Пополнить\n                    </button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default AddMoneyPage\n","import React from 'react'\nimport './FeedbackPage.css'\n\nclass FeedbackPage extends React.Component {\n    componentWillMount() {\n        /*global VK*/\n        // noinspection JSUnresolvedVariable, JSUnresolvedFunction\n        VK.Widgets.Comments('vk_comments', {\n            limit: 10,\n            attach: '*',\n            height: 800\n        })\n    }\n    render() {\n        return (\n            <div>\n                <div id=\"vk_comments\" className=\"vk-comments\" />\n            </div>\n        )\n    }\n}\n\nexport default FeedbackPage\n","import React, {Component} from 'react'\nimport {API} from '../../../../services/services.api'\n\nclass SurveyAddForm extends Component {\n    componentWillMount() {\n        API.getPollById(173986239, 313436729)\n    }\n\n    render() {\n        return <div />\n    }\n}\n\nexport default SurveyAddForm\n","import React, {Component} from 'react'\nimport SurveyAddForm from './SurveyAddForm/SurveyAddForm'\n\nconsole.log(\"VK API\");\n\nclass SurveyPage extends Component {\n    state = {\n        showAddForm: false\n    }\n    toggleAddForm = () => {\n        this.setState({\n            showAddForm: !this.state.showAddForm\n        })\n    }\n    render() {\n        const {showAddForm} = this.state\n        return (\n            <div className=\"survey-wrapper\">\n                <div className=\"survey-intro\">Создать Викторину!</div>\n                <span\n                    className={`plus-sign ${\n                        showAddForm ? 'plus-sign--cris' : ''\n                    }`}\n                    onClick={this.toggleAddForm}\n                />\n                {showAddForm && <SurveyAddForm />}\n            </div>\n        )\n    }\n}\n\nexport default SurveyPage\n","import React, {Component, Fragment} from 'react'\nimport {Route, Router, Switch} from 'react-router-dom'\nimport CleanPage from './components/CleanPage/CleanPage'\nimport * as Sentry from '@sentry/browser'\nimport TopBar from './components/TopBar'\nimport AddMoneyPage from './components/AddMoneyPage/AddMoneyPage'\nimport axios from 'axios'\nimport FeedbackPage from './components/FeedbackPage/FeedbackPage'\nimport {history} from '../store'\nimport SurveyPage from './components/SurveyPage/SurveyPage'\n\nif (process.env.NODE_ENV === 'production') {\n    // noinspection JSUnresolvedVariable\n    Sentry.init({\n        dsn: process.env.REACT_APP_SENTRY_DSN\n    })\n}\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {}\n    }\n\n    setBalance(newBalance) {\n        this.setState({balance: newBalance})\n    }\n\n    async componentWillMount() {\n        window.user_id = getQueryParam('viewer_id')\n        window.auth_key = getQueryParam('auth_key')\n        history.push('/')\n        await this.updateBalance()\n    }\n\n    async getUserBalance() {\n        return (await axios.get('https://hot-dog.site/api/getBalance', {\n            params: {\n                user_vk_id: window.user_id,\n                auth_key: window.auth_key\n            }\n        })).data.balance\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({error})\n        Sentry.withScope((scope) => {\n            Object.keys(errorInfo).forEach((key) => {\n                scope.setExtra(key, errorInfo[key])\n            })\n            Sentry.captureException(error)\n        })\n    }\n\n    async updateBalance() {\n        this.setBalance(await this.getUserBalance())\n    }\n\n    render() {\n        return (\n            <Router basename={process.env.PUBLIC_URL} history={history}>\n                <Fragment>\n                    <TopBar balance={this.state.balance} />\n                    <Switch>\n                        <Route\n                            exact\n                            path=\"/\"\n                            render={() => (\n                                <CleanPage\n                                    balance={this.state.balance}\n                                    updateBalance={this.updateBalance.bind(\n                                        this\n                                    )}\n                                />\n                            )}\n                        />\n                        <Route path=\"/clean\" component={CleanPage} />\n                        <Route path=\"/survey\" component={SurveyPage} />\n                        <Route\n                            path={'/add_money'}\n                            render={() => (\n                                <AddMoneyPage\n                                    updateBalance={this.updateBalance.bind(\n                                        this\n                                    )}\n                                />\n                            )}\n                        />\n                        <Route path={'/feedback'} component={FeedbackPage} />\n                        <Route\n                            path={'/getToken'}\n                            component={() => <div>ACCESS TOKEN MAN</div>}\n                        />\n                    </Switch>\n                </Fragment>\n            </Router>\n        )\n    }\n}\n\nfunction getQueryParam(param) {\n    const query = window.location.search.substring(1)\n    window.urlParams = query\n    const vars = query.split('&')\n    for (let i = 0; i < vars.length; i++) {\n        const pair = vars[i].split('=')\n        if (pair[0] === param) {\n            return pair[1]\n        }\n    }\n    throw new Error(`Query Variable ${param} not found`)\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Provider} from 'react-redux'\nimport App from './app/App'\nimport './static/styles/index.scss'\nimport * as serviceWorker from './serviceWorker'\nimport store from './store/index'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}